
Процедура ОбработкаПроведения(Отказ, Режим)

	// Инициализация дополнительных свойств для проведения документа.
	ИнкубаторБотовСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ЗаписьНаПрием.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	ИнкубаторБотовСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	ИнкубаторБотовСервер.ОтразитьЗаписиНаПрием(ДополнительныеСвойства, Движения, Отказ);
	ИнкубаторБотовСервер.ОтразитьНапоминанияКонтрагента(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	ИнкубаторБотовСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// ДанныеЗаполнения - спр.Контрагент
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	Дата = ТекущаяДата();
	ИДКонтрагента = ДанныеЗаполнения.Идентификатор;
	Контрагент = ДанныеЗаполнения;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ДобавитьКоличество
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
Процедура ДобавитьНоменклатуру(Мастер, Номенклатура) Экспорт
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Мастер", Мастер);
	СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ВремяЗаписи, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// уже есть, значит повторно выбрали строку для снятия отметки о выборе
		// нужно удалить строку 
		ВремяЗаписи.Удалить(СтрокаТабличнойЧасти);
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ВремяЗаписи.Добавить();
		СтрокаТабличнойЧасти.Мастер = Мастер;
		СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
		СтрокаТабличнойЧасти.Длительность = Номенклатура.Длительность;
		СтрокаТабличнойЧасти.Цена = Номенклатура.Цена;
		СтрокаТабличнойЧасти.ТипЗаписиНаПрием   = Перечисления.ТипыЗаписейНаПрием.Телеграм;
	КонецЕсли;
	
	//ИзмКоличество(СтрокаТабличнойЧасти);
	
КонецПроцедуры //ДобавитьКоличество

Процедура ЗаписатьВремя(Мастер, Знач ЗаписьНаДату) Экспорт
	
	ЗаписьНаДату = Дата(ЗаписьНаДату);
	
	ВремяЗаписи.Сортировать("Длительность");
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Мастер", Мастер);
	//СтруктураОтбора.Вставить("Номенклатура", Справочники.НоменклатураМастеров.ПустаяСсылка());
	строкиТабЧасти = ВремяЗаписи.НайтиСтроки(СтруктураОтбора);
	
	Если строкиТабЧасти.Количество() > 0 Тогда
		Для каждого строкаТЧ Из строкиТабЧасти Цикл
			строкаТЧ.ДатаВремяЗаписи = ЗаписьНаДату;
			ЗаписьНаДату = ЗаписьНаДату + строкаТЧ.Длительность*60;
		КонецЦикла;
	КонецЕсли;                     
	
КонецПроцедуры

Процедура ОчиститьВремяЗаписиПоМастеру(Мастер) Экспорт 
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Мастер", Мастер);
	//СтруктураОтбора.Вставить("Номенклатура", Справочники.НоменклатураМастеров.ПустаяСсылка());
	строкиТабЧасти = ВремяЗаписи.НайтиСтроки(СтруктураОтбора);
	
	Если строкиТабЧасти.Количество() > 0 Тогда
		Для каждого строкаТЧ Из строкиТабЧасти Цикл
			строкаТЧ.ДатаВремяЗаписи = Дата("00010101");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Процедура ИзмКоличество(стрТовары) Экспорт
//	
//	Цена = МодульТелеграмСлужебный.ПолучитьЦену(Дата, стрТовары.Номенклатура, ТипЦен);
//	
//	стрТовары.Цена = Цена;
//	стрТовары.Сумма = стрТовары.Количество*стрТовары.Цена*стрТовары.Коэффициент;
//	
//КонецПроцедуры

