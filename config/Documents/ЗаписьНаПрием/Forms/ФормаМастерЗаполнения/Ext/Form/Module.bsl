///////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ

&НаКлиенте
Перем ПредыдущаяВыделеннаяДатаКалендаря;
&НаКлиенте
Перем ПредыдущееОтображение;


&НаСервере
Функция ДниМастера(НачПериода, КонПериода, Рабочий)
	
	мДниМастера = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(РабочиеДниМастеров.ДатаВремяЗаписи, ДЕНЬ) КАК ДатаВремяЗаписи
		|ИЗ
		|	РегистрСведений.РабочиеДниМастеров КАК РабочиеДниМастеров
		|ГДЕ
		|	РабочиеДниМастеров.Рабочий = &Рабочий
		|	И РабочиеДниМастеров.Мастер = &Мастер
		|	И РабочиеДниМастеров.ДатаВремяЗаписи МЕЖДУ &НачПериода И &КонПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(РабочиеДниМастеров.ДатаВремяЗаписи, ДЕНЬ)
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("КонПериода", КонПериода);
	Запрос.УстановитьПараметр("Мастер", ТекущийМастер);
	Запрос.УстановитьПараметр("НачПериода", НачПериода);
	Запрос.УстановитьПараметр("Рабочий", Рабочий);
	
	мДниМастера = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДатаВремяЗаписи");
	
	Возврат мДниМастера;
	
КонецФункции

&НаСервере
Функция СвободноеВремяМастера(НачалоПериода, КонецПериода)
	
	мСвободноеВремяМастера = Новый Массив;
	мСвободныеДатыМастера = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеДниМастеров.НомерНедели КАК НомерНедели,
		|	НАЧАЛОПЕРИОДА(РабочиеДниМастеров.ДатаВремяЗаписи, ДЕНЬ) КАК ДеньВремяЗаписи,
		|	РабочиеДниМастеров.ДатаВремяЗаписи КАК ДатаВремяЗаписи,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗаписиНаПрием.Контрагент, 1) ССЫЛКА Справочник.Контрагенты
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ЕстьКонтрагент,
		|	РабочиеДниМастеров.Рабочий КАК Рабочий
		|ИЗ
		|	РегистрСведений.РабочиеДниМастеров КАК РабочиеДниМастеров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиНаПрием КАК ЗаписиНаПрием
		|		ПО РабочиеДниМастеров.Мастер = ЗаписиНаПрием.Мастер
		|			И РабочиеДниМастеров.ДатаВремяЗаписи = ЗаписиНаПрием.ДатаВремяЗаписи
		|ГДЕ
		|	РабочиеДниМастеров.Мастер = &Мастер
		|	И РабочиеДниМастеров.НомерНедели МЕЖДУ &НеделяНачало И &НеделяОкончание
		|ИТОГИ
		|	СУММА(ЕстьКонтрагент),
		|	КОЛИЧЕСТВО(Рабочий)
		|ПО
		|	ДеньВремяЗаписи";
	
	Запрос.УстановитьПараметр("Мастер", ТекущийМастер);
	Запрос.УстановитьПараметр("НеделяНачало", НеделяГода(НачалоМесяца(НачалоПериода)));
	Запрос.УстановитьПараметр("НеделяОкончание", НеделяГода(КонецМесяца(КонецПериода)));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДни = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДни.Следующий() Цикл
		
		Если ВыборкаДни.Рабочий > ВыборкаДни.ЕстьКонтрагент Тогда //есть свободное время
			мСвободныеДатыМастера.Добавить(ВыборкаДни.ДеньВремяЗаписи);
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = ВыборкаДни.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ВыборкаДетальныеЗаписи.ЕстьКонтрагент = 0 Тогда
				мСвободноеВремяМастера.Добавить(ВыборкаДетальныеЗаписи.ДатаВремяЗаписи);	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

	Результат = Новый Структура;
	Результат.Вставить("СвободныеДатыМастера", мСвободныеДатыМастера);
	Результат.Вставить("СвободноеВремяМастера", мСвободноеВремяМастера);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВосстановитьНастройки()
	
	//ВариантПериода = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
	//	"ВариантПериода",
	//	Элементы.ВариантПериода.СписокВыбора[0].Значение
	//);
	//
	//НастройкиОтображения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
	//	"Отображение",
	//	Неопределено
	//);
	//
	//Если НастройкиОтображения = Неопределено Тогда
	
	НастройкиОтображения = Новый Структура;
	НастройкиОтображения.Вставить("НачалоРабочегоДня",		9);
	НастройкиОтображения.Вставить("ОкончаниеРабочегоДня",	17);
	НастройкиОтображения.Вставить("ОтображатьТекущуюДату",	Истина);
	
	//КонецЕсли;
	
	ЦветВыходной = webЦвета.Персиковый;
	ЦветРабочий = webЦвета.БледноЗеленый;
	ДатаКалендаря = ТекущаяДата();
	ВариантПериода = "День"; //Неделя
	
	//Планировщик.ШкалаВремени.Элементы[0].ФорматДня = ФорматДняШкалыВремени.ДеньМесяцаДеньНедели;
	//Если ТекущийМастер.ШагЗаписи > 100 Тогда
	//	Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;
	//	Планировщик.ШкалаВремени.Элементы[0].Кратность = Окр(ТекущийМастер.ШагЗаписи/60, 0);
	//Иначе 
	//	Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Минута;
	//	Планировщик.ШкалаВремени.Элементы[0].Кратность = ТекущийМастер.ШагЗаписи;
	//КонецЕсли;
	//
	//ВыделитьДатыОтображения(ЭтотОбъект);
	//УстановитьПредставлениеПериода(ЭтотОбъект);
	
КонецПроцедуры


&НаКлиенте
Процедура ДатаКалендаряПриВыводеПериода(Элемент, ОформлениеПериода)
	
	СтруктураСвободноеВремяМастера = СвободноеВремяМастера(ОформлениеПериода.НачалоПериода, ОформлениеПериода.КонецПериода);
	мРабочиеДниМастера = ДниМастера(ОформлениеПериода.НачалоПериода, ОформлениеПериода.КонецПериода, Истина);
	мВыходныеДниМастера = ДниМастера(ОформлениеПериода.НачалоПериода, ОформлениеПериода.КонецПериода, Ложь);
	Попытка
		Для каждого ТекДата Из ОформлениеПериода.Даты Цикл
			//фон рабочие/выходные дни
			Если НЕ мРабочиеДниМастера.Найти(ТекДата.Дата) = Неопределено Тогда
				ТекДата.ЦветФона = ЦветРабочий;
			ИначеЕсли НЕ мВыходныеДниМастера.Найти(ТекДата.Дата) = Неопределено Тогда
				ТекДата.ЦветФона = ЦветВыходной;
			Иначе
				ТекДата.ЦветФона = webЦвета.Белый;    
			КонецЕсли;
			
			//цвет текста воскресенье
			//Если ДеньНедели(ТекДата.Дата)>=6 Тогда
			//	ТекДата.ЦветТекста = webЦвета.Красный; 
			//КонецЕсли;
			
			//цвет текста свободное время
			мСвободныеДатыМастера = Новый Массив;
			Если СтруктураСвободноеВремяМастера.Свойство("СвободныеДатыМастера", мСвободныеДатыМастера) Тогда
				Если мСвободныеДатыМастера.Найти(ТекДата.Дата) = Неопределено Тогда
					 ТекДата.ЦветТекста = webЦвета.ДымчатоБелый;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ДатаКалендаряПриИзменении(Элемент)
	//ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияДатаКалендаряПриИзменении", 0.1, Истина);
	ОбновитьДанныеВыборВремени();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОЖИДАНИЯ

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияДатаКалендаряПриИзменении()
	//Если	Объект.ТекущееОтображение = "День"
	//	Или Объект.ТекущееОтображение = "Неделя"
	//	Или Объект.ТекущееОтображение = "ПоРесурсам"
	//	Или Объект.ТекущееОтображение = "Расписание"
	//	Или Объект.ТекущееОтображение = "Список"
	//	Или Объект.ТекущееОтображение = "Диспетчеризация" Тогда
	//	//
	//	Если Объект.ТекущееОтображение = "Список" Тогда
	//		МассивВыбранныхДат = ПолучитьМассивВыбранныхДат();
	//		КалендарьСписокПериодНачало		= НачалоДня(МассивВыбранныхДат[0]);
	//		КалендарьСписокПериодОкончание	= НачалоДня(МассивВыбранныхДат[МассивВыбранныхДат.ВГраница()]);
	//	КонецЕсли;
	//	
	//	КалендарьОбновитьКлиент();
	//КонецЕсли;
	
	ОбновитьДанныеВыборВремени();
	
	ПредыдущаяВыделеннаяДатаКалендаря = ДатаКалендаря;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеВыборВремени()
	
	//Элементы.СтраницаКалендарь.ПодчиненныеЭлементы.ГруппаКнопкиВремя.ПодчиненныеЭлементы.Количество()
	МассивСтрок = Новый Массив;
	Для каждого Эл Из Элементы.ГруппаКнопкиВремя.ПодчиненныеЭлементы Цикл
		//СписокКнопокВремя.Добавить(Эл);
		Эл.Видимость = Ложь;
	КонецЦикла;
	
	//Для каждого Эл Из СписокКнопокВремя Цикл
	//	НайденныйЭлементФормы = Элементы.Найти(Эл.Значение.Имя);
	//	Если НайденныйЭлементФормы <> Неопределено Тогда
	//		Элементы.Удалить(НайденныйЭлементФормы);	
	//	КонецЕсли;
	//КонецЦикла; 
	
	тзЗаписей = Обработки[ТекущийМастер.Бот.Обработка].Создать().ПолучитьТаблицуЗаписей(ТекущийМастер, ДатаКалендаря, 30);
	
	ТекИмяКнопки = "";
	СтрокаКнопок = Новый Массив;
	ЕстьСвободноеВремя = Ложь;
	
	Для каждого сЗапись Из тзЗаписей Цикл
		
		ТекИмяКнопки = "ВРЕМЯ_" + Формат(сЗапись.ВремяЗаписи,"Л=uk_UA;ДФ=ггггMMддЧЧммсс");//"Время" + Н;
		
		Если Элементы.Найти(ТекИмяКнопки) = Неопределено Тогда
			
			Элементы.Добавить(ТекИмяКнопки,Тип("КнопкаФормы"), Элементы.ГруппаКнопкиВремя);
			
			Если сЗапись.Выводить Тогда
				
				ЕстьСвободноеВремя = Истина;
				
				КомандаВремя = Команды.Добавить(ТекИмяКнопки);
				КомандаВремя.Действие = "Время_";
				
				ТекстКнопки = Формат(сЗапись.ВремяЗаписи,"Л=uk_UA;ДФ=ЧЧ:мм");
				Элементы[ТекИмяКнопки].ИмяКоманды = ТекИмяКнопки;	
				
			Иначе  // время занято
				
				ТекстКнопки = Формат(сЗапись.ВремяЗаписи,"Л=uk_UA;ДФ=ЧЧ:мм");// + " - Занято";
				//Элементы[ТекИмяКнопки].ИмяКоманды = "ИГНОР";
				Элементы[ТекИмяКнопки].Доступность = Ложь; // .ЦветТекста = WebЦвета.Серый;
			КонецЕсли;
			
			Элементы[ТекИмяКнопки].Заголовок = ТекстКнопки;	
		Иначе 
			Элементы[ТекИмяКнопки].Видимость = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Время_(Элемент)
	
	ВремяЗаписи = Дата(Сред(Элемент.Имя,7,СтрДлина(Элемент.Имя)));
	Попытка
		ВыборВремени(ВремяЗаписи);
	Исключение
		ТекстСообщения = НСтр("uk = 'Помилка збереження запису! Зверніться, будь ласка, в технічну підтримку за тел. (067) 260-31-07';ru = 'Ошибка сохранения записи! Обратитесь, пожалуйста, в техническую поддержку по тел. (067) 260-31-07") + Символы.ПС
		+ НСтр("ru = 'Время не может быть записано по причине:'") + Символы.ПС
		+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПоказатьПредупреждение(,ТекстСообщения);
	КонецПопытки;
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ВыборВремени(ВремяЗаписи)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаписатьВремя(ТекущийМастер, Дата(ВремяЗаписи));
	Попытка
		Документ.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Регистратура.Запись документа ЗаписьНаПрием'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка, , ,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ТекстСообщения = Обработки[ТекущийМастер.Бот.Обработка].Создать().ПолучитьТекстЗаказа(Документ.Ссылка, ТекущийМастер);
	
	СообщениеПользователю = Новый СообщениеПользователю;
	СообщениеПользователю.Текст = ТекстСообщения;
	СообщениеПользователю.Сообщить();
	
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруВДокумент(ТекущийМастер, МассивНоменклатура)
	
	Документ = РеквизитФормыВЗначение("Объект");
	
	Для каждого Номенклатура Из МассивНоменклатура Цикл
		Документ.ДобавитьНоменклатуру(ТекущийМастер, Номенклатура, Перечисления.ТипыЗаписейНаПрием.Телефон);	
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры

&НаСервере
Функция ЕстьЗаписиКлиентовНаДату(Мастер, МассивДат)

	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаписиНаПрием.ДатаВремяЗаписи КАК ДатаВремяЗаписи
		|ИЗ
		|	РегистрСведений.ЗаписиНаПрием КАК ЗаписиНаПрием
		|ГДЕ
		|	ЗаписиНаПрием.Мастер = &Мастер
		|	И НАЧАЛОПЕРИОДА(ЗаписиНаПрием.ДатаВремяЗаписи, ДЕНЬ) В (&МассивДат)";
	
	Запрос.УстановитьПараметр("Мастер", Мастер);
	Запрос.УстановитьПараметр("МассивДат", МассивДат);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Заполним таблицу номенклатуры
	ТекущийМастер = Регистратура.ПолучитьМастераПоЛогину(ПараметрыСеанса.ТекущийПользователь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НоменклатураМастеров.Ссылка КАК Номенклатура,
		|	НоменклатураМастеров.Цена КАК Цена,
		//|	НоменклатураМастеров.Представление КАК Номенклатура,
		|	ЛОЖЬ КАК Пометка
		|ИЗ
		|	Справочник.НоменклатураМастеров КАК НоменклатураМастеров
		|ГДЕ
		|	НоменклатураМастеров.Владелец = &Мастер";
	
	Запрос.УстановитьПараметр("Мастер", ТекущийМастер);
	
	ТаблицаУслуги.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ВосстановитьНастройки();
	
КонецПроцедуры


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУслуги Тогда
		МассивНоменклатура = Новый Массив;
		Для каждого СтрокаТаблицы Из ТаблицаУслуги Цикл
			Если СтрокаТаблицы.Пометка Тогда
				МассивНоменклатура.Добавить(СтрокаТаблицы.Номенклатура);		
			КонецЕсли;
		КонецЦикла;
		ДобавитьНоменклатуруВДокумент(ТекущийМастер, МассивНоменклатура);
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКалендарь;	
	КонецЕсли;
	
	ВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКалендарь Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУслуги;
		
	КонецЕсли;
	
	ВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ИГНОР(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.КнопкаДалее.ЦветФона = ЦветРабочий;
	Элементы.КнопкаДалее.ЦветТекста = WebЦвета.Черный;
	
	ВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВидимостьДоступность()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУслуги Тогда
		Элементы.КнопкаНазад.Видимость = Ложь;
		Элементы.КнопкаДалее.Видимость = Истина;
		Элементы.КнопкаЗакрыть.Видимость = Истина;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКалендарь Тогда
		Элементы.КнопкаНазад.Видимость = Истина;
		Элементы.КнопкаДалее.Видимость = Ложь;
		Элементы.КнопкаЗакрыть.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры;

#КонецОбласти	