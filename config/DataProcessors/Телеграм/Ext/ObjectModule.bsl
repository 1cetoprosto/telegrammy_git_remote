// Описание Telegram Bot API https://core.telegram.org/bots/api
//
// Product backlog:
//
// 2. Переделать метод ОтправитьФайл. Сейчас реализовано для платформы 8.2. 
//		нужно использовать новые возможность как в ОтправитьМатериал


Перем Бот Экспорт;
Перем Сервер Экспорт; 
Перем Эмоджи Экспорт;

// Получает обновления с сервера api.telegram.org
//
Процедура getUpdate()Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Боты.Ссылка КАК Бот,
	|	Боты.НомерАпдейта КАК ПоследнееСообщение
	|ИЗ
	|	Справочник.Боты КАК Боты
	|ГДЕ
	|	Боты.Автосбор
	|	И НЕ Боты.ПометкаУдаления";
	
	Если Не Бот = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И Боты.Ссылка = &Бот";
		Запрос.УстановитьПараметр("Бот", Бот);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	//ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЧтениеСообщенийДляБотов);
	
	Соединение = Новый HTTPСоединение("api.telegram.org", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Бот = Выборка.Бот;
		Если Выборка.ПоследнееСообщение = 0 Тогда
			//Ресурс = СтрШаблон("bot%1/getUpdates", Бот.Токен);
			Ресурс = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку("bot[Токен]/getUpdates", Новый Структура("Токен", Бот.Токен));
		Иначе
			//Ресурс = СтрШаблон("bot%1/getUpdates?offset=%2", Бот.Токен, Формат(Выборка.ПоследнееСообщение + 1, "ЧГ=")); 
			Ресурс = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку("bot[Токен]/getUpdates?offset=[ПоследнееСообщение]",
				Новый Структура("Токен,ПоследнееСообщение", Бот.Токен, Формат(Выборка.ПоследнееСообщение + 1, "ЧГ="))); // + 1
		КонецЕсли;
		Попытка
			Запрос = Новый HTTPЗапрос(Ресурс);
			Ответ = Соединение.Получить(Запрос);
			
			Результат = ПреобразоватьJSONВСтруктуру(Ответ.ПолучитьТелоКакСтроку());
		Исключение
			ЗаписьЖурналаРегистрации("Телеграм", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		КонецПопытки;
		
		Если НЕ Результат["ok"] Тогда
			ЗаписьЖурналаРегистрации("Телеграм", УровеньЖурналаРегистрации.Ошибка,ЭтотОбъект.Метаданные(),, Результат["description"]);
			Продолжить;
		КонецЕсли;
		
		getUpdatesОбработкаОтвета(Результат);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура setWebhook(ok)Экспорт 
	
	// url="https://server/baza1c/hs/ExchangeData/TelegramUpdateMessage";
	// де server – це доменне ім’я Вашего серверу, baza1c – ім’я бази вказане при публікації.
	УРЛ = "";
	Если ЗначениеЗаполнено(Бот.URLWebhook) Тогда
		УРЛ = СокрЛП(Бот.URLWebhook) + СокрЛП(Бот.Код); 	
	КонецЕсли;
	
	Ресурс = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку("bot[Токен]/setWebhook?url=[УРЛ]",
	Новый Структура("Токен,УРЛ", Бот.Токен, УРЛ)); //КодироватьСтроку(УРЛ,СпособКодированияСтроки.КодировкаURL)
	
	Соединение = Новый HTTPСоединение("api.telegram.org",,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	
	Запрос = Новый HTTPЗапрос(Ресурс); 
	
	Ответ = Соединение.Получить(Запрос);
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	
	Результат = ПрочитатьJSON(Чтение,Истина);
	
	ЗаписьЖурналаРегистрации("Телеграм",УровеньЖурналаРегистрации.Информация,ЭтотОбъект.Метаданные(),,"Ресурс: " + Ресурс +Символы.ПС+ "Ответ: "+Ответ.ПолучитьТелоКакСтроку());
	
	ok = Результат["ok"];
	
КонецПроцедуры

Процедура deleteWebhook(ok) Экспорт 
	
	Ресурс = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку("bot[Токен]/deleteWebhook",
	Новый Структура("Токен", Бот.Токен)); //КодироватьСтроку(УРЛ,СпособКодированияСтроки.КодировкаURL)
	
	Соединение = Новый HTTPСоединение("api.telegram.org",,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	
	Запрос = Новый HTTPЗапрос(Ресурс); 
	
	Ответ = Соединение.Получить(Запрос);
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	
	ОтветСоотв = ПрочитатьJSON(Чтение,Истина);
	
	ok = ОтветСоотв["ok"];
	
КонецПроцедуры

// Обрабатывает массив объектов Update полученный от api.telegram.org
// на запрос getUpdates
Процедура getUpdatesОбработкаОтвета(Результат) Экспорт 
	
	СписокЗапросов = Результат.result;
	Для каждого Запрос Из СписокЗапросов Цикл
		ЗаписатьАпдейт(Запрос);
	КонецЦикла; 
	
	Если СписокЗапросов.Количество() Тогда
		БотОбъект = Бот.ПолучитьОбъект();
		БотОбъект.НомерАпдейта = Запрос.update_id;
		
		Попытка
			БотОбъект.Записать();	
		Исключение
			ЗаписьЖурналаРегистрации("Телеграм",УровеньЖурналаРегистрации.Ошибка,БотОбъект,Запрос.update_id, ОписаниеОшибки()); 
		    //ОписаниеОшибки()
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает Update полученный от api.telegram.org
// на запрос getUpdates
Процедура UpdateОбработкаОтвета(JSON) Экспорт 
	
	//Получаем данные сообщения и преобразуем в структуру 	 
	Запрос = ПреобразоватьJSONВСтруктуру(JSON);
	
	ЗаписатьАпдейт(Запрос);
	//ЗаписьЖурналаРегистрации("Телеграм",УровеньЖурналаРегистрации.Информация,,,"ЗаписатьАпдейт("+Запрос+")");
КонецПроцедуры

Процедура ЗаписатьАпдейт(Запрос)
	
	//ЗаписьЖурналаРегистрации("Телеграм.ЗаписатьАпдейт", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(),, Запрос);
	
	Запись = РегистрыСведений.ЗапросыБоту.СоздатьМенеджерЗаписи();
	Запись.Бот = Бот;
	Запись.update_id = Запрос.update_id;
	Запись.Прочитать();
	Если Запись.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	//Если Бот.ДетальнаяОбработкаПолучения Тогда
	//	Обработка = Обработки[Бот.Обработка].Создать();
	//	Обработка.ПриПолученииСообщения(Запрос);
	//	Продолжить;
	//КонецЕсли;
	
	Запись = РегистрыСведений.ЗапросыБоту.СоздатьМенеджерЗаписи();
	Запись.Бот = Бот;
	Запись.update_id = Запрос.update_id;
	Запись.ДанныеЗапроса = Новый ХранилищеЗначения(Запрос, Новый СжатиеДанных(6));
	
	Если Запрос.Свойство("callback_query") Тогда
		
		Сообщение = Запрос.callback_query;
		Отправитель = Сообщение.from;	// У callback_query всегда есть отправитель
		
		Запись.message_id = Сообщение.message.message_id;
		Запись.id = Сообщение.message.chat.id;
		
		Если Сообщение.message.Свойство("edit_date") Тогда
			Запись.МоментВремени = МестноеВремя(Дата('19700101') + Сообщение.message.edit_date);
		Иначе 
			Запись.МоментВремени = МестноеВремя(Дата('19700101') + Сообщение.message.date);
			//Запись.date = МестноеВремя(Дата('19700101') + Сообщение.message.date);	
		КонецЕсли;
		
		Запись.first_name = Отправитель.first_name;
		Запись.text = Сообщение.data;
		Запись.ТипОтвета = Перечисления.ТипыОтветовТелеграм.Кнопка;
		Запись.Контрагент = НайтиКонтрагента(Отправитель);
		
	ИначеЕсли Запрос.Свойство("message") Тогда
		
		Сообщение = Запрос.message;
		
		Запись.message_id = Сообщение.message_id;
		Запись.id = Сообщение.chat.id;
		Запись.МоментВремени = МестноеВремя(Дата('19700101') + Сообщение.date);
		//Запись.date = МестноеВремя(Дата('19700101') + Сообщение.date);
		Если Сообщение.Свойство("from") Тогда
			Отправитель = Сообщение.from;
			Запись.first_name = Отправитель.first_name;
			Запись.Контрагент = НайтиКонтрагента(Отправитель);
		КонецЕсли;
		Если Сообщение.Свойство("location") Тогда
			Запись.ТипОтвета = Перечисления.ТипыОтветовТелеграм.Локация;
		ИначеЕсли Сообщение.Свойство("contact") Тогда
			contact = Сообщение.contact;
			Запись.ТипОтвета = Перечисления.ТипыОтветовТелеграм.Контакт;
			Запись.text = contact.phone_number;
		ИначеЕсли Сообщение.Свойство("text") Тогда
			Запись.ТипОтвета = Перечисления.ТипыОтветовТелеграм.Текст;
			Запись.text = Сообщение.text;
		КонецЕсли;
	Иначе
		// Надо отметить, что бывают и апдейты, которые не подпадают под условия выше. Например, добавление бота в чат генерит сообщение.
		// Если вам надо их фиксировать и обрабатывать, тут допишите свои обработчики.
	КонецЕсли;
	
	Попытка
		Запись.Записать();	
	Исключение
		ЗаписьЖурналаРегистрации("Телеграм.ЗаписьUpdate", УровеньЖурналаРегистрации.Ошибка, ЭтотОбъект.Метаданные(),, ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьАпдейты(ОбработкаБота) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапросыБоту.update_id КАК update_id,
	|	ЗапросыБоту.Контрагент КАК Контрагент,
	|	ЗапросыБоту.id КАК Чат,
	//|	ЗапросыБоту.ТипОтвета КАК ТипОтвета,
	|	ЗапросыБоту.id КАК id,
	|	ЗапросыБоту.ТипОтвета,
	|	ЗапросыБоту.Бот,
	|	ЗапросыБоту.МоментВремени,
	|	ЗапросыБоту.first_name,
	|	ЗапросыБоту.message_id,
	|	ЗапросыБоту.text,
	//|	ЗапросыБоту.date,
	|	ЗапросыБоту.Обработан,
	|	ЗапросыБоту.ДанныеЗапроса
	//|	ЗапросыБоту.Пропущен
	|ИЗ
	|	РегистрСведений.ЗапросыБоту КАК ЗапросыБоту
	|ГДЕ
	|	ЗапросыБоту.Бот = &Бот
	|	И НЕ ЗапросыБоту.Обработан
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗапросыБоту.МоментВремени";
	
	Запрос.УстановитьПараметр("Бот", ОбработкаБота.Телеграм.Бот);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбработкаБота.ПрочитатьИОбработатьСообщение(Выборка);
	КонецЦикла;

КонецПроцедуры	// ОбработатьЗапросыНаСервере

Функция НайтиКонтрагента(Отправитель)
	
	Результат = Неопределено;
	
	//Если Бот = Справочники.Боты.NinetyFiveRuBot Тогда
		
		//Результат = Справочники.Контрагенты.НайтиПоРеквизиту("ТелеграмID", Отправитель.id);
		//
		//Если Результат.Пустая() Тогда
		//	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		//	НовыйКонтрагент.ТелеграмID = Отправитель.id;
		//	НовыйКонтрагент.ТелеграмИмя = Отправитель.first_name;
		//	Если Отправитель.Свойство("username") Тогда
		//		НовыйКонтрагент.ТелеграмНик = Отправитель.username;
		//	КонецЕсли;
		//	НовыйКонтрагент.Наименование = Отправитель.first_name;
		//	НовыйКонтрагент.Записать();
		//	Результат = НовыйКонтрагент.Ссылка;
		//КонецЕсли;
		
		// возможные варианты:
		//МодульТелеграмСлужебный.НайтиКлиентаПоТелефону(Телефон);
		//
		//МодульТелеграмСлужебный.НайтиКлиентаПоИДТелеграм(ИДКонтрагента);
		
	//КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура ПолучитьПоследнееДействие
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
Функция ПолучитьПоследнееДействие(ИДКонтрагента) Экспорт 
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДанныеТелеграмм.update_id,
		|	ДанныеТелеграмм.date,
		|	ДанныеТелеграмм.text,
		|	ДанныеТелеграмм.message_id КАК message_id,
		|	ДанныеТелеграмм.first_name,
		|	ДанныеТелеграмм.id КАК id,
		|	ДанныеТелеграмм.ТипОтвета
		|ИЗ
		|	РегистрСведений.ДанныеТелеграмм КАК ДанныеТелеграмм
		|ГДЕ
		|	ДанныеТелеграмм.Обработан
		|	И ДанныеТелеграмм.id = &ИДКонтрагента
		|
		|УПОРЯДОЧИТЬ ПО
		|	message_id УБЫВ";
	
	Запрос.УстановитьПараметр("ИДКонтрагента", ИДКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Новый Структура;
		Результат.Вставить("update_id",Выборка.update_id);
		Результат.Вставить("date",Выборка.date);
		Результат.Вставить("text",Выборка.text);
		Результат.Вставить("message_id",Выборка.message_id);
		Результат.Вставить("first_name",Выборка.first_name);
		Результат.Вставить("id",Выборка.id);
		Результат.Вставить("ТипОтвета",Выборка.ТипОтвета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ПолучитьПоследнееДействие

Функция ОтправитьФайл(ПолучательID, ТипФайла, ИмяФайла) Экспорт 
	
	Ключ = ""; //Константы.А_КлючAPIТелеграм.Получить();
	Сервер = "api.telegram.org";
	//Отчеты.Задачи.Создать().СкомпоноватьРезультат(Таб);
	//Таб = ВернутьТабДокумент();	
	//ИмяФайла = ПолучитьИмяВременногоФайла(Строка(ТипФайла));
	//
	//Таб.Записать(ИмяФайла,ТипФайла);
	
	СтрокаСоединения = "/bot" + Ключ + "/sendDocument";
	
	Boundary = "----"+Строка(Новый УникальныйИдентификатор());
	
	//Определяем массив для процедуры ОбъединитьФайлы 
	МассивФайловДляОбъединения = Новый Массив; 
	
	//Формируем начальный фрагмент файла POST-запроса 
	ИмяФайлаОтправкиНачало = ПолучитьИмяВременногоФайла("txt"); 
	ФайлОтправкиНачало = Новый ЗаписьТекста(ИмяФайлаОтправкиНачало, КодировкаТекста.UTF8); 
	
	//Формируем конечный фрагмент файла POST-запроса 
	ИмяФайлаОтправкиКонец = ПолучитьИмяВременногоФайла("txt"); 
	ФайлаОтправкиКонец = Новый ЗаписьТекста(ИмяФайлаОтправкиКонец, КодировкаТекста.UTF8);
	
	ТекстДляОтправки = "";
	
	ТекстДляОтправки = ТекстДляОтправки + "--"+Boundary + Символы.ПС;    
	ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""chat_id""" + Символы.ПС + Символы.ПС;    
	ТекстДляОтправки = ТекстДляОтправки + Формат(ПолучательID,"ЧГ=") + Символы.ПС;
	
	ТекстДляОтправки = ТекстДляОтправки + "--"+Boundary + Символы.ПС;    
	ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""document""; filename="+"""report."+Строка(ТипФайла)+""""+ Символы.ПС;    
	ТекстДляОтправки = ТекстДляОтправки + "Content-Type: multipart/form-data" + Символы.ПС;
	
	ФайлОтправкиНачало.ЗаписатьСтроку(ТекстДляОтправки );
	ФайлОтправкиНачало.Закрыть(); 
	МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиНачало); 
	
	МассивФайловДляОбъединения.Добавить(СокрЛП(ИмяФайла)); 
	
	ТекстДляОтправки = "" + Символы.ПС;
	ТекстДляОтправки = ТекстДляОтправки + "--"+Boundary+"--";
	ФайлаОтправкиКонец.ЗаписатьСтроку(ТекстДляОтправки);
	ФайлаОтправкиКонец.Закрыть(); 
	МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиКонец); 
	
	
	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("txt");
	ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяФайлаОтправки);
	
	HTTPЗапрос = Новый HTTPЗапрос;
	Заголовки = Новый Соответствие;
	
	HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive"); 
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary="+Boundary); 
	
	HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаОтправки);    
	HTTPЗапрос.АдресРесурса = СтрокаСоединения; 
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);
	Попытка
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,, ЗащищенноеСоединение);
	Исключение
		Сообщить("Не удалось установить соединение с сервером "+Сервер+ 
		+ Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		ok = Ложь;
		Возврат ok;
	КонецПопытки;
	
	// посылаем запрос
	Попытка 
		ОтветHTTP = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		HTTPСоединение = Неопределено;
		Если ОтветHTTP.КодСостояния > 299  Тогда
			Сообщить("Код состояния " + ОтветHTTP.КодСостояния + ". Проверка не выполнена");
		КонецЕсли;
	Исключение
		Сообщить("Ошибка выполенния запроса!");
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
	КонецПопытки;
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ОтветHTTP.ПолучитьТелоКакСтроку());
	ОтветСоотв = ПрочитатьJSON(Чтение,Истина);
	ok = ОтветСоотв["ok"] ;
	Чтение.Закрыть();
	
	Возврат ok;
	
КонецФункции

// Эта процедура отправляет не только файлы, но и многое другое.
// Например: документы, фотки, аудио, видео
// Пример использования:
// 	ОтправитьМатериал(Чат, Материал, "sendDocument", "document");
//
//Процедура ОтправитьМатериал(Чат, Материал, Метод, Параметр)

//	Если Материал = Неопределено Тогда
//		Возврат;
//	КонецЕсли;

//	Если ПустаяСтрока(Материал.Описание) Тогда
//		ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(Материал);

//		ТекстЗапроса =
//"--%1
//|Content-Disposition: form-data; name=""chat_id""
//|
//|%2
//|--%1
//|Content-Disposition: form-data; name=""%4""; filename=""%3""
//|";
//		Разделитель = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
//		ТекстЗапроса = СтрШаблон(ТекстЗапроса, Разделитель, Чат, ДанныеФайла.ИмяФайла, Параметр);

//		// Оцените, какой клёвый объект сделали в 8.3.
//		// Особенно это заметно при сравнении с реализациями для платформы 8.2, которые можно найти в инете.
//		Поток = Новый ПотокВПамяти();
//		ЗаписьДанных = Новый ЗаписьДанных(Поток);
//		ЗаписьДанных.ЗаписатьСтроку(ТекстЗапроса);
//		ЗаписьДанных.Записать(ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Материал));
//		ЗаписьДанных.ЗаписатьСтроку(СтрШаблон("--%1--", Разделитель));
//		ЗаписьДанных.Закрыть();

//		ДвоичныеДанныеЗапроса = Поток.ЗакрытьИПолучитьДвоичныеДанные();
//		
//		// передадим данные на сервер
//		Заголовки = Новый Соответствие();
//		Заголовки.Вставить("Content-Type", "multipart/form-data, boundary=" + Разделитель);

//		ТекстРесурса = СтрШаблон("bot%1/%2", Бот.Токен, Метод);
//		Соединение = Новый HTTPСоединение("api.telegram.org", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());
//		Запрос = Новый HTTPЗапрос(ТекстРесурса, Заголовки);
//		Запрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанныеЗапроса);
//		HTTPОтвет = Соединение.ОтправитьДляОбработки(Запрос);

//		ЧтениеJSON = Новый ЧтениеJSON;
//		ЧтениеJSON.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());
//		Результат = ПрочитатьJSON(ЧтениеJSON);
//		ЧтениеJSON.Закрыть();

//		Если Результат.ok Тогда
//			МатериалОбъект = Материал.ПолучитьОбъект();
//			МатериалОбъект.Описание = Результат.result.document.file_id;
//			МатериалОбъект.Записать();
//		Иначе
//			Сообщить(Формат(Результат.error_code, "ЧГ=") + " " + Результат.description);
//		КонецЕсли;
//	Иначе
//		//ТекстЗапроса = "bot" + Объект.Бот.Токен + "/sendPhoto?chat_id=" + Формат(Чат, "ЧГ=") + "&photo=" + ИдентификаторИзображения;
//		ТекстЗапроса = СтрШаблон("bot%1/%2?chat_id=%3&%4=%5", Бот.Токен, Метод, Чат, Параметр, Материал.Описание);

//		Запрос = Новый HTTPЗапрос(ТекстЗапроса);
//		Соединение = Новый HTTPСоединение("api.telegram.org", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());
//		HTTPОтвет = Соединение.Получить(Запрос);
//		ЧтениеJSON = Новый ЧтениеJSON;
//		ЧтениеJSON.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());
//		Результат = ПрочитатьJSON(ЧтениеJSON);
//		ЧтениеJSON.Закрыть();

//		Если НЕ Результат.ok Тогда
//			Сообщить(Формат(Результат.error_code, "ЧГ=") + " " + Результат.description);
//		КонецЕсли;
//	КонецЕсли;

//КонецПроцедуры

Функция sendChatAction(ТекстСообщения, ПолучательID,ok) Экспорт 
	
	Ресурс = "bot"+Бот.Токен+"/sendChatAction?chat_id="+Формат(ПолучательID,"ЧГ=")+"&action="+СокрЛП(ТекстСообщения); 
	
	Возврат ПолучитьОтветТелеграм(Ресурс);
	
КонецФункции

Функция sendPhoto(chat_id,
					photo,
					caption,
					disable_notification = Неопределено,
					reply_to_message_id = Неопределено,
					reply_markup = Неопределено) Экспорт 
	
	Ключ = ""; //Константы.А_КлючAPIТелеграм.Получить();
	Сервер = "api.telegram.org";
	//Отчеты.Задачи.Создать().СкомпоноватьРезультат(Таб);
	//Таб = ВернутьТабДокумент();	
	//ИмяФайла = ПолучитьИмяВременногоФайла(Строка(ТипФайла));
	//
	//Таб.Записать(ИмяФайла,ТипФайла);
	
	СтрокаСоединения = "/bot" + Ключ + "/sendPhoto";
	
	Boundary = "----"+Строка(Новый УникальныйИдентификатор());
	
	//Определяем массив для процедуры ОбъединитьФайлы 
	МассивФайловДляОбъединения = Новый Массив; 
	
	//Формируем начальный фрагмент файла POST-запроса 
	ИмяФайлаОтправкиНачало = ПолучитьИмяВременногоФайла("txt"); 
	ФайлОтправкиНачало = Новый ЗаписьТекста(ИмяФайлаОтправкиНачало, КодировкаТекста.UTF8); 
	
	//Формируем конечный фрагмент файла POST-запроса 
	ИмяФайлаОтправкиКонец = ПолучитьИмяВременногоФайла("txt"); 
	ФайлаОтправкиКонец = Новый ЗаписьТекста(ИмяФайлаОтправкиКонец, КодировкаТекста.UTF8);
	
	ТекстДляОтправки = "";
	
	ТекстДляОтправки = ТекстДляОтправки + "--"+Boundary + Символы.ПС;    
	ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""chat_id""" + Символы.ПС + Символы.ПС;    
	ТекстДляОтправки = ТекстДляОтправки + Формат(chat_id,"ЧГ=") + Символы.ПС;
	
	ТекстДляОтправки = ТекстДляОтправки + "--"+Boundary + Символы.ПС;    
	ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""photo""; filename="+"""shares."+Строка("jpg")+""""+ Символы.ПС;    
	ТекстДляОтправки = ТекстДляОтправки + "Content-Type: multipart/form-data" + Символы.ПС;
	
	ФайлОтправкиНачало.ЗаписатьСтроку(ТекстДляОтправки );
	ФайлОтправкиНачало.Закрыть(); 
	МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиНачало); 
	
	МассивФайловДляОбъединения.Добавить(СокрЛП(photo)); 
	
	ТекстДляОтправки = "" + Символы.ПС;
	ТекстДляОтправки = ТекстДляОтправки + "--"+Boundary+"--";
	ФайлаОтправкиКонец.ЗаписатьСтроку(ТекстДляОтправки);
	ФайлаОтправкиКонец.Закрыть(); 
	МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиКонец); 
	
	
	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("txt");
	ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяФайлаОтправки);
	
	HTTPЗапрос = Новый HTTPЗапрос;
	Заголовки = Новый Соответствие;
	
	HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive"); 
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary="+Boundary); 
	
	HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаОтправки);    
	HTTPЗапрос.АдресРесурса = СтрокаСоединения; 
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);
	Попытка
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,, ЗащищенноеСоединение);
	Исключение
		Сообщить("Не удалось установить соединение с сервером "+Сервер+ 
		+ Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		ok = Ложь;
		Возврат ok;
	КонецПопытки;
	
	// посылаем запрос
	Попытка 
		ОтветHTTP = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		HTTPСоединение = Неопределено;
		Если ОтветHTTP.КодСостояния > 299  Тогда
			Сообщить("Код состояния " + ОтветHTTP.КодСостояния + ". Проверка не выполнена");
		КонецЕсли;
	Исключение
		Сообщить("Ошибка выполенния запроса!");
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
	КонецПопытки;
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ОтветHTTP.ПолучитьТелоКакСтроку());
	ОтветСоотв = ПрочитатьJSON(Чтение,Истина);
	ok = ОтветСоотв["ok"] ;
	Чтение.Закрыть();
	
	Возврат ok;
	
КонецФункции

Функция sendMessage(chat_id,
					text,
					parse_mode = Неопределено,
					disable_web_page_preview = Неопределено,
					disable_notification = Неопределено,
					reply_to_message_id = Неопределено,
					reply_markup = Неопределено) Экспорт 
					
	text = КодироватьСтроку(СокрЛП(text),СпособКодированияСтроки.КодировкаURL,КодировкаТекста.UTF8);
	
	Ресурс = "bot"+Бот.Токен+"/sendMessage?chat_id="+Формат(chat_id,"ЧГ=")+"&text="+СокрЛП(text);
	
	Если ЗначениеЗаполнено(parse_mode) Тогда
		Ресурс = Ресурс + ?(parse_mode=Перечисления.ВидФорматирования.БезФорматирования,"", "&parse_mode="+parse_mode);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(disable_web_page_preview) Тогда
		Ресурс = Ресурс + "&disable_web_page_preview=" + disable_web_page_preview;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(disable_notification) Тогда
		Ресурс = Ресурс + "&disable_notification=" + disable_notification;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(reply_to_message_id) Тогда
		Ресурс = Ресурс + "&reply_to_message_id=" + Формат(reply_to_message_id, "ЧГ=");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(reply_markup) Тогда
		reply_markup = КодироватьСтроку(reply_markup,СпособКодированияСтроки.КодировкаURL,КодировкаТекста.UTF8);
		Ресурс = Ресурс +"&reply_markup="+reply_markup; 	
	КонецЕсли;
	
	Возврат ПолучитьОтветТелеграм(Ресурс);
	
КонецФункции

Функция sendLocation(chat_id,
					latitude,
					longitude = Неопределено,
					live_period = Неопределено,
					disable_notification = Неопределено,
					reply_to_message_id = Неопределено,
					reply_markup = Неопределено) Экспорт 
	
	Ресурс = "bot"+Бот.Токен+"/sendLocation?chat_id="+Формат(chat_id,"ЧГ=")+"&latitude="+latitude+"&longitude="+longitude;
	
	Если ЗначениеЗаполнено(live_period) Тогда
		Ресурс = Ресурс + "&live_period=" + live_period;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(disable_notification) Тогда
		Ресурс = Ресурс + "&disable_notification=" + disable_notification;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(reply_to_message_id) Тогда
		Ресурс = Ресурс + "&reply_to_message_id=" + Формат(reply_to_message_id, "ЧГ=");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(reply_markup) Тогда
		Ресурс = Ресурс +"&reply_markup="+reply_markup; 	
	КонецЕсли;
	
	Возврат ПолучитьОтветТелеграм(Ресурс);
	
КонецФункции

Функция editMessageText(chat_id,
						message_id,       //
						inline_message_id,//
						text,
						parse_mode = Неопределено,
						disable_web_page_preview = Неопределено,
						reply_markup = Неопределено) Экспорт 
	
	text = КодироватьСтроку(СокрЛП(text),СпособКодированияСтроки.КодировкаURL,КодировкаТекста.UTF8);
	
	Ресурс = "bot"+Бот.Токен+"/editMessageText?chat_id="+Формат(chat_id,"ЧГ=")+"&message_id="+Формат(message_id,"ЧГ=")+"&text="+СокрЛП(text);
	
	Если ЗначениеЗаполнено(parse_mode) Тогда
		Ресурс = Ресурс + ?(parse_mode=Перечисления.ВидФорматирования.БезФорматирования,"", "&parse_mode="+parse_mode);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(disable_web_page_preview) Тогда
		Ресурс = Ресурс + "&disable_web_page_preview=" + disable_web_page_preview;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(reply_markup) Тогда
		reply_markup = КодироватьСтроку(reply_markup,СпособКодированияСтроки.КодировкаURL,КодировкаТекста.UTF8);
		Ресурс = Ресурс +"&reply_markup="+reply_markup; 	
	КонецЕсли;
	
	Возврат ПолучитьОтветТелеграм(Ресурс);
	
КонецФункции

Функция deleteMessage(chat_id,
					message_id)
	
	Ресурс = "bot"+Бот.Токен+"/deleteMessage?chat_id="+Формат(chat_id,"ЧГ=")+"&message_id="+Формат(message_id,"ЧГ=");
	
	Возврат ПолучитьОтветТелеграм(Ресурс);				
	
КонецФункции

Функция forwardMessage(chat_id,
	from_chat_id,
	disable_notification = Неопределено,
	message_id) Экспорт 
	
	// переделать на повторное использование
	Ключ = ""; //Константы.А_КлючAPIТелеграм.Получить();
	Сервер = "api.telegram.org";
	
	Ресурс = "bot"+Ключ+"/forwardMessage?chat_id="+Формат(chat_id,"ЧГ=")+"&from_chat_id="+Формат(from_chat_id,"ЧГ=");
	Если НЕ disable_notification = Неопределено Тогда
		Ресурс = Ресурс +"&disable_notification="+disable_notification; 	
	КонецЕсли;
	Ресурс = Ресурс + "&message_id="+message_id;
	
	Возврат ПолучитьОтветТелеграм(Ресурс);
	
КонецФункции

Функция editMessageReplyMarkup(chat_id,
							message_id,       //
							inline_message_id,//
							reply_markup = Неопределено) Экспорт 
	
	Ресурс = "bot"+Бот.Токен+"/editMessageReplyMarkup?chat_id="+Формат(chat_id,"ЧГ=")+"&message_id="+Формат(message_id,"ЧГ=");
	Если НЕ reply_markup = Неопределено Тогда
		Ресурс = Ресурс +"&reply_markup="+reply_markup; 	
	КонецЕсли;
	
	Возврат ПолучитьОтветТелеграм(Ресурс);
	
КонецФункции

// KeyboardButton
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
// 	text="Перейти на Яндекс"
//	url="https://ya.ru"
// Возвращаемое значение: 
//
Функция KeyboardButton(text,
	request_contact=Ложь,
	request_location=Ложь) Экспорт 
	
	KeyboardButton = Новый Структура;
	KeyboardButton.Вставить("text", text);
	KeyboardButton.Вставить("request_contact", request_contact);
	KeyboardButton.Вставить("request_location", request_location);
	
	Возврат KeyboardButton;
	
КонецФункции //KeyboardButton

// InlineKeyboardButton
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
// 	text="Перейти на Яндекс"
//	url="https://ya.ru"
// Возвращаемое значение: 
//
Функция InlineKeyboardButton(text,
	url=Неопределено,
	callback_data=Неопределено,
	switch_inline_query=Неопределено,
	switch_inline_query_current_chat=Неопределено,
	callback_game=Неопределено,
	pay=Неопределено) Экспорт 
	
	callback_button = Новый Структура;
	callback_button.Вставить("text", text);
	
	Если НЕ url=Неопределено Тогда
		callback_button.Вставить("url", url);	
	КонецЕсли;
	Если НЕ callback_data=Неопределено Тогда
		callback_button.Вставить("callback_data", callback_data);	
	КонецЕсли;
	Если НЕ switch_inline_query=Неопределено Тогда
		callback_button.Вставить("switch_inline_query", switch_inline_query);	
	КонецЕсли;
	Если НЕ switch_inline_query_current_chat=Неопределено Тогда
		callback_button.Вставить("switch_inline_query_current_chat", switch_inline_query_current_chat);	
	КонецЕсли;
	Если НЕ callback_game=Неопределено Тогда
		callback_button.Вставить("callback_game", callback_game);	
	КонецЕсли;
	Если НЕ pay=Неопределено Тогда
		callback_button.Вставить("pay", pay);	
	КонецЕсли;
	
	Возврат callback_button;
	
КонецФункции //InlineKeyboardButton

// InlineKeyboardButton
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
// 	text="Перейти на Яндекс"
//	url="https://ya.ru"
// Возвращаемое значение: 
//
Функция InlineKeyboardMarkup_add(button1, button2=Неопределено, button3=Неопределено) Экспорт 
	
	inline_keyboard = Новый Массив;
	
	inline_keyboard.Добавить(button1);
	Если НЕ button2=Неопределено Тогда
		inline_keyboard.Добавить(button2);	
	КонецЕсли;
	Если НЕ button3=Неопределено Тогда
		inline_keyboard.Добавить(button3);	
	КонецЕсли;
	
	Возврат inline_keyboard;
	
КонецФункции //InlineKeyboardButton

Функция ReplyKeyboardMarkup_add(button1, button2=Неопределено, button3=Неопределено) Экспорт 
	
	Reply_keyboard = Новый Массив;
	
	Reply_keyboard.Добавить(button1);
	Если НЕ button2=Неопределено Тогда
		Reply_keyboard.Добавить(button2);	
	КонецЕсли;
	Если НЕ button3=Неопределено Тогда
		Reply_keyboard.Добавить(button3);	
	КонецЕсли;
	
	Возврат Reply_keyboard;
	
КонецФункции //InlineKeyboardButton

// ReplyKeyboardButton
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
// 	text="Перейти на Яндекс"
//	url="https://ya.ru"
// Возвращаемое значение: 
//
Процедура ReplyKeyboardMarkup_row(keyboard, Reply_keyboard) Экспорт 
	
	keyboard.Добавить(Reply_keyboard);
	
КонецПроцедуры //ReplyKeyboardButton

// InlineKeyboardButton
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
// 	text="Перейти на Яндекс"
//	url="https://ya.ru"
// Возвращаемое значение: 
//
Процедура InlineKeyboardMarkup_row(keyboard, inline_keyboard) Экспорт 
	
	keyboard.Добавить(inline_keyboard);
	
КонецПроцедуры //InlineKeyboardButton

// InlineKeyboardMarkup
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
// 	text="Перейти на Яндекс"
//	url="https://ya.ru"
// Возвращаемое значение: 
//
Функция InlineKeyboardMarkup(МассивСтрок) Экспорт 
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("inline_keyboard", МассивСтрок);
	
	InlineKeyboard = ПреобразоватьВКлавиатуруJSON(МассивСтрок, СтруктураОтвета);
	
	Возврат InlineKeyboard;
	
КонецФункции //InlineKeyboardMarkup

// ReplyKeyboardMarkup
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
// 	text="Перейти на Яндекс"
//	url="https://ya.ru"
// Возвращаемое значение: 
//
Функция ReplyKeyboardMarkup(МассивСтрок) Экспорт 
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("keyboard", МассивСтрок);
	СтруктураОтвета.Вставить("resize_keyboard", Истина);
	СтруктураОтвета.Вставить("one_time_keyboard", Истина);
	
	ReplyKeyboard = ПреобразоватьВКлавиатуруJSON(МассивСтрок, СтруктураОтвета);
	
	Возврат ReplyKeyboard;
	
КонецФункции //ReplyKeyboardMarkup

// ReplyKeyboardHide
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
// 	text="Перейти на Яндекс"
//	url="https://ya.ru"
// Возвращаемое значение: 
//
Функция ReplyKeyboardRemove() Экспорт 
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("remove_keyboard", Истина);
	СтруктураОтвета.Вставить("selective", Ложь);
	
	ReplyKeyboard = ПреобразоватьВКлавиатуруJSON(, СтруктураОтвета);
	
	Возврат ReplyKeyboard;
	
КонецФункции //ReplyKeyboardHide


//////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//


Функция ПолучитьОтветТелеграм(Ресурс)
	
	Соединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	Запрос = Новый HTTPЗапрос(Ресурс); 
	
	Попытка
		Ответ = Соединение.Получить(Запрос);	
	Исключение
		ТекстОписания = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(Бот.ПолноеНаименование(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОписания);
		Возврат Неопределено;
	КонецПопытки;
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	
	Результат = ПрочитатьJSON(Чтение,Истина);
	Чтение.Закрыть();
	
	Если НЕ Результат["ok"] Тогда
		ТекстОписания = Результат["description"] +	" Код: " + Формат(Результат["error_code"], "ЧГ=");
		ЗаписьЖурналаРегистрации(Бот.ПолноеНаименование(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОписания);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция КлавиатураЖСОН
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
Функция ПреобразоватьВКлавиатуруJSON(МассивСтрок=Неопределено, СтруктураОтвета) Экспорт 
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,,ЭкранированиеСимволовJSON.Нет));
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	СтрJSON = ЗаписьJSON.Закрыть();
	СтрJSON = СтрЗаменить(СтрJSON,"\\","\");
	Возврат СтрJSON;
	
КонецФункции //КлавиатураЖСОН

Функция ПреобразоватьJSONВСтруктуру(JSON) Экспорт 
	
	//#Если ВебКлиент Тогда
	//ЗаписьЖурналаРегистрации("Телеграм",УровеньЖурналаРегистрации.Информация,,,"ПреобразоватьJSONВСтруктуру:" + JSON);
		
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(JSON); 
	Попытка
		Результат = ПрочитатьJSON(ЧтениеJSON); //, Ложь, "date", ФорматДатыJSON.JavaScript
	Исключение
	    ЗаписьЖурналаРегистрации("Телеграм",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки() + Символы.ПС + "ПреобразоватьJSONВСтруктуру:" + JSON);
	КонецПопытки;
	
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразоватьвСистему(Число10,система) Экспорт
 
	Если система > 36 или система < 2 тогда
		ТекстОписания = "ПреобразоватьвСистему. Выбранная система исчисления не поддерживается";
		ЗаписьЖурналаРегистрации("Телеграм", УровеньЖурналаРегистрации.Ошибка,,, ТекстОписания);
        Возврат -1;
    КонецЕсли;
 
    СтрокаЗначений = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    СтрокаСистема = "";
    Пока Число10 > 0 цикл
        РезДеления = Число10/система;
        ЧислоСистема = цел(РезДеления);
        остатокОтДеления = Число10 - система*(ЧислоСистема);
        СтрокаСистема = сред(СтрокаЗначений,остатокОтДеления+1,1)+ СтрокаСистема;
        Число10 = ?(ЧислоСистема=0,0,РезДеления); 
    КонецЦикла;
 
    Нечётное = стрДлина(СтрокаСистема) - цел(стрДлина(СтрокаСистема)/2)*2;
    Если Нечётное тогда
        СтрокаСистема = "0"+СтрокаСистема;
    КонецЕсли;
 
    Возврат СтрокаСистема;
 
КонецФункции
 
Функция URLEncode(стр) Экспорт  
 
    Длина=СтрДлина(Стр);
    Итог="";
    Для Н=1 По Длина Цикл
        Знак=Сред(Стр,Н,1);
        Код=КодСимвола(Знак);
 
        если ((Знак>="a")и(Знак<="z")) или
             ((Знак>="A")и(Знак<="Z")) или
             ((Знак>="0")и(Знак<="9")) тогда
            Итог=Итог+Знак;
        Иначе
            Если (Код>=КодСимвола("А"))И(Код<=КодСимвола("п")) Тогда
                Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(144+Код-КодСимвола("А"),16);
            ИначеЕсли (Код>=КодСимвола("р"))И(Код<=КодСимвола("я")) Тогда
                Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(128+Код-КодСимвола("р"),16);
            ИначеЕсли (Знак="ё") Тогда
                Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(145,16);
            ИначеЕсли (Знак="Ё") Тогда
                Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(129,16);
            Иначе
                Итог=Итог+"%"+ПреобразоватьвСистему(Код,16);
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
    Возврат Итог;
 
КонецФункции

//{[+](фрагмент добавлен),  15.09.2017 23:03:52
Процедура ВыполнитьОтчет2(Сервер, Ключ, chat_id)
	//врТекст = КодироватьСтроку(СокрЛП(ТекстСообщения), СпособКодированияСтроки.КодировкаURL, КодировкаТекста.UTF8);    
	СтрокаСоединения = "/bot"+СокрЛП(Ключ)+"/sendPhoto";
	
	Boundary = "----"+Строка(Новый УникальныйИдентификатор());
	
	//Определяем массив для процедуры ОбъединитьФайлы 
	МассивФайловДляОбъединения = Новый Массив; 
	
	//Формируем начальный фрагмент файла POST-запроса 
	ИмяФайлаОтправкиНачало = ПолучитьИмяВременногоФайла("txt"); 
	ФайлОтправкиНачало = Новый ЗаписьТекста(ИмяФайлаОтправкиНачало, КодировкаТекста.UTF8); 
	
	//Формируем конечный фрагмент файла POST-запроса 
	ИмяФайлаОтправкиКонец = ПолучитьИмяВременногоФайла("txt"); 
	ФайлаОтправкиКонец = Новый ЗаписьТекста(ИмяФайлаОтправкиКонец, КодировкаТекста.UTF8);
	
	ТекстДляОтправки = "";
	
	// ЧАТ
	ТекстДляОтправки = ТекстДляОтправки + "--"+Boundary + Символы.ПС;    
	ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""chat_id""" + Символы.ПС + Символы.ПС;    
	ТекстДляОтправки = ТекстДляОтправки + СокрЛП(chat_id) + Символы.ПС;
	
	// ПОДПИСЬ    
	ТекстДляОтправки = ТекстДляОтправки + "--"+Boundary + Символы.ПС;    
	ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""caption""" + Символы.ПС + Символы.ПС;    
	ТекстДляОтправки = ТекстДляОтправки + СокрЛП("Название картинки!") + Символы.ПС;
	
	// ФОТО
	ТекстДляОтправки = ТекстДляОтправки + "--"+Boundary + Символы.ПС;    
	ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""photo""; filename=""01.jpg""" + Символы.ПС;    
	ТекстДляОтправки = ТекстДляОтправки + "Content-Type: image/jpeg" + Символы.ПС;
	
	ФайлОтправкиНачало.ЗаписатьСтроку(ТекстДляОтправки );
	ФайлОтправкиНачало.Закрыть(); 
	МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиНачало); 
	
	МассивФайловДляОбъединения.Добавить(СокрЛП("C:\01.jpg")); 
	
	ТекстДляОтправки = "" + Символы.ПС;
	ТекстДляОтправки = ТекстДляОтправки + "--"+Boundary+"--";
	ФайлаОтправкиКонец.ЗаписатьСтроку(ТекстДляОтправки);
	ФайлаОтправкиКонец.Закрыть(); 
	МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиКонец); 
	
	ИмяФайлаОтправки = "C:\Bases\post.txt";
	ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяФайлаОтправки);
	
	
	HTTPЗапрос = Новый HTTPЗапрос;
	Заголовки = Новый Соответствие;
	
	HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive"); 
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary="+Boundary); 
	
	HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаОтправки);    
	HTTPЗапрос.АдресРесурса = СтрокаСоединения; 
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);
	HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,, ЗащищенноеСоединение);
	
	Попытка 
		ОтветHTTP = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		Сообщить("Ошибка выполенния запроса!");
	КонецПопытки;
	
	ДанныеКакСтрока = ОтветHTTP.ПолучитьТелоКакСтроку();
	Сообщить("Отчет:");
	Сообщить(ДанныеКакСтрока);	
	
КонецПроцедуры

Функция ВернутьТабДокумент()
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Статус");
	НоваяСтр = ТЗ.Добавить();
	НоваяСтр.Статус = "Хорошо";
	НоваяСтр = ТЗ.Добавить();
	НоваяСтр.Статус = "Ошибка";
	
	//Получаем исходный макет
	Макет = ""; //ПолучитьОбщийМакет("Основной");       
	//Создаем табличный документ для вывода
	Таб = Новый ТабличныйДокумент;        
	//Получаем шапку
	Шапка=Макет.ПолучитьОбласть("Шапка");     
	//Устанавливаем параметры в области шапки
	Шапка.Параметры.НачДата=НачалоДня(ТекущаяДата());
	Шапка.Параметры.КонДата=КонецДня(ТекущаяДата());
	
	//Выводим шапку
	Таб.Вывести(Шапка);
	
	//можно получить области еще до цикла
	ОбластьОшибка=Макет.ПолучитьОбласть("Ошибка");
	ОбластьСтрока=Макет.ПолучитьОбласть("Строка");
	
	//Выводим все строки таблицы значений ТЗ
	Для Каждого Стр Из ТЗ Цикл
		//Выбираем, какую строку выводить
		Строка=?(СокрЛП(Стр.Статус)="Ошибка",ОбластьОшибка,ОбластьСтрока);
		
		//Автоматически заполняем параметры области строки из строки таблицы значений
		Строка.Параметры.Заполнить(Стр);
		
		//Выводим строку
		Таб.Вывести(Строка);
	КонецЦикла;
	
	Возврат Таб;
	
КонецФункции
//} 15.09.2017 23:03:52


Сервер = "api.telegram.org";

Эмоджи = Новый Структура;
Эмоджи.Вставить("thumbsup", "\uD83D\uDC4D"); 
Эмоджи.Вставить("smilingface", "\uD83D\uDE03");
Эмоджи.Вставить("whiteheavycheckmark", "\u2705");
Эмоджи.Вставить("negative_squared_cross_mark", "\u274E");
Эмоджи.Вставить("envelope", "\u2709");
Эмоджи.Вставить("smiling", "\uD83D\uDE0A");
Эмоджи.Вставить("star", "\u2B50");
Эмоджи.Вставить("telephone", "\uD83D\uDCDE");
Эмоджи.Вставить("atm", "\uD83C\uDFE7");
Эмоджи.Вставить("exchange", "\uD83D\uDCB1");
Эмоджи.Вставить("charttrend", "\uD83D\uDCC8");
Эмоджи.Вставить("paperclip", "\uD83D\uDCCE");
Эмоджи.Вставить("clock", "\uD83D\uDD52");
Эмоджи.Вставить("calendar", "\uD83D\uDCC5");
Эмоджи.Вставить("banknoteusd", "\uD83D\uDCB5");
Эмоджи.Вставить("banknoteeuro", "\uD83D\uDCB6");
Эмоджи.Вставить("ok", "\uD83D\uDC4C");
Эмоджи.Вставить("idea", "\uD83D\uDCA1");
Эмоджи.Вставить("video", "\uD83D\uDCF9");
Эмоджи.Вставить("camera", "\uD83D\uDCF7");
Эмоджи.Вставить("globe_with_meridians", "\uD83C\uDF10");
Эмоджи.Вставить("couple", "\uD83D\uDC6B");
Эмоджи.Вставить("interrobang", "\u2049");
Эмоджи.Вставить("headphones", "\uD83C\uDFA7");
Эмоджи.Вставить("heavylatincross", "\uD83D\uDD47");
Эмоджи.Вставить("worldmap", "\uD83D\uDDFA");
Эмоджи.Вставить("info", "\u2139");
Эмоджи.Вставить("shopping_bags", "\uD83D\uDECD"); 
Эмоджи.Вставить("gift", "\uD83C\uDF81");
Эмоджи.Вставить("white_check_mark", "\u2705");
Эмоджи.Вставить("arrow_left", "\u2B05");
Эмоджи.Вставить("arrow_right", "\u27A1");
Эмоджи.Вставить("arrow_up", "\u2B06");
Эмоджи.Вставить("x", "\u274C");
Эмоджи.Вставить("heavy_minus_sign", "\u2796");
Эмоджи.Вставить("point_down", "\uD83D\uDC47");
Эмоджи.Вставить("heavy_check_mark", "\u2714");
Эмоджи.Вставить("memo", "\uD83D\uDCDD");
Эмоджи.Вставить("date", "\uD83D\uDCC5");
Эмоджи.Вставить("alarm_clock", "\u23F0");
Эмоджи.Вставить("nail_care", "\uD83D\uDC85");
