////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ТИПАМИ


// Служебная функция, предназначенная для получения описания типов строки, заданной длины.
// 
// Параметры:
//  ДлинаСтроки - число, длина строки.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для строки указанной длины.
//
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт
	
	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная));
	
КонецФункции // ПолучитьОписаниеТиповСтроки()	 

// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
// 
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти = 0, ЗнакЧисла = Неопределено) Экспорт

	Если ЗнакЧисла = Неопределено Тогда
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
	Иначе
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, ЗнакЧисла);
	КонецЕсли;

	Возврат Новый ОписаниеТипов("Число", КвалификаторЧисла);

КонецФункции // ПолучитьОписаниеТиповЧисла()

// Служебная функция, предназначенная для получения описания типов даты
// 
// Параметры:
//  ЧастиДаты - системное перечисление ЧастиДаты.
// 
Функция ПолучитьОписаниеТиповДаты(ЧастиДаты) Экспорт
	
	Возврат Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты));
	
КонецФункции	// ПолучитьОписаниеТиповДаты() 

// Служебная функция - возвращает принадлежность объекта метаданных определенному классу
// 
// Параметры:
//	Класс  - класс
//	Объект - объект метаданных
// 
Функция ПринадлежностьКлассуМетаданных(Класс, Объект) Экспорт
	Для Каждого МДОбъект Из Метаданные[Класс] Цикл
		Если МДОбъект = Объект Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции // ПринадлежностьКлассуМетаданных()

// Служебная функция, предназначенная для получения описания типов набора записей по объекту метаданных
// Параметры:
//	Объект - объект метаданных
//
// Возвращаемое значение:
// Описание типов с единственным типом набора записей
//
Функция ПолучитьОписаниеТиповНабораЗаписей(Объект) Экспорт
	
	Массив = Новый Массив;
	Если ПринадлежностьКлассуМетаданных("РегистрыРасчета", Объект) Тогда
		Массив.Добавить(Тип("РегистрРасчетаНаборЗаписей."+Объект.Имя));
	ИначеЕсли ПринадлежностьКлассуМетаданных("РегистрыБухгалтерии", Объект) Тогда
		Массив.Добавить(Тип("РегистрБухгалтерииНаборЗаписей."+Объект.Имя));
	ИначеЕсли ПринадлежностьКлассуМетаданных("РегистрыНакопления", Объект) Тогда
		Массив.Добавить(Тип("РегистрНакопленияНаборЗаписей."+Объект.Имя));
	ИначеЕсли ПринадлежностьКлассуМетаданных("РегистрыСведений", Объект) Тогда
		Массив.Добавить(Тип("РегистрСведенийНаборЗаписей."+Объект.Имя));
	КонецЕсли;
	Возврат Новый ОписаниеТипов(Массив);
	
КонецФункции  // ПолучитьОписаниеТиповНабораЗаписей()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПАРАМЕТРОВ СЕАНСА, ПЕРЕМЕННЫХ МОДУЛЯ ПРИЛОЖЕНИЯ

// Функция возвращает значение экспортных переменных модуля приложений из параметра сеанса
// Необходмо для возможности создания объектов на сервере
Функция ПолучитьЗначениеПеременной(ИмяПараметра, Кэш = Неопределено, КэшИзменен = Ложь) Экспорт
	
	Если Кэш = Неопределено Тогда
		// Кэш не был проинициализирован
		Кэш = Новый Структура;
	Иначе
		// Ищем значение в структуре
		НайденноеЗначение = Неопределено;
		Если Кэш.Свойство(ИмяПараметра, НайденноеЗначение) Тогда
			Возврат НайденноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	// Значение в КЭШе не нашли, получим значение из БД
	Если ВРег(ИмяПараметра) = ВРег("глТекущийПользователь") Тогда
		НайденноеЗначение = ПараметрыСеанса.ТекущийПользователь;
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глСоответствиеТекстовЭлектронныхПисем") Тогда
		НайденноеЗначение = Новый Соответствие;
			
	//ИначеЕсли ВРег(ИмяПараметра) = ВРег("УчетнаяПолитикаПоУправленческомуУчету") Тогда
	//	НайденноеЗначение = СоздатьКЭШУчетнойПолитики("");
	//		
	//ИначеЕсли ВРег(ИмяПараметра) = ВРег("УчетнаяПолитикаПоНалоговомуУчету") Тогда
	//	НайденноеЗначение = СоздатьКЭШУчетнойПолитики("НалоговыйУчет");
	//	
	//ИначеЕсли ВРег(ИмяПараметра) = ВРег("глУчетнаяПолитикаПоПерсоналуОрганизации") Тогда
	//	НайденноеЗначение = ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации();
	
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте") Тогда
		НайденноеЗначение = Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить();	
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ВалютаРегламентированногоУчета") Тогда
		НайденноеЗначение = Константы.ВалютаРегламентированногоУчета.Получить();
			
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ВалютаУправленческогоУчета") Тогда
		НайденноеЗначение = Константы.ВалютаУправленческогоУчета.Получить();
			
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ИспользоватьСерииНоменклатуры") Тогда
		НайденноеЗначение = Константы.ИспользоватьСерииНоменклатуры.Получить();
			
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ИспользоватьХарактеристикиНоменклатуры") Тогда
		НайденноеЗначение = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
			
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ИспользоватьВозвратнуюТару") Тогда
		НайденноеЗначение = Константы.ИспользоватьВозвратнуюТару.Получить();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("УказаниеСкладовВТабличнойЧастиДокументов") Тогда
		НайденноеЗначение = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ИспользоватьОплатуБанковскимиКредитами") Тогда
		НайденноеЗначение = Константы.ИспользоватьОплатуБанковскимиКредитами.Получить();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ИспользоватьОплатуПлатежнымиКартами") Тогда
		НайденноеЗначение = Константы.ИспользоватьОплатуПлатежнымиКартами.Получить();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ПечатьПрефиксаРИБ") Тогда
		НайденноеЗначение = Константы.ПечатьПрефиксаРИБ.Получить()
		
	//ИначеЕсли ВРег(ИмяПараметра) = ВРег("глОбработкаАвтоОбменДанными") Тогда
	//	НайденноеЗначение = ПроцедурыОбменаДанными.ВыполнитьИнициализациюАвтообменаПриНачалеРаботы();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ИспользоватьУправляемыеБлокировки") Тогда	
		НайденноеЗначение = Метаданные.РежимУправленияБлокировкойДанных <> Метаданные.СвойстваОбъектов.РежимУправленияБлокировкойДанныхПоУмолчанию.Автоматический
 			И Найти(СтрокаСоединенияИнформационнойБазы(), "Srvr=") = 1;
		
	#Если Клиент Тогда

	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глОбработкаАвтоПолученияОтправкиЭлектронныхПисем") Тогда	
		Если ПравоДоступа("Использование", Метаданные.Обработки.АвтоПолучениеОтправкаЭлектронныхПисем) Тогда
			НайденноеЗначение = Обработки.АвтоПолучениеОтправкаЭлектронныхПисем.ПолучитьФорму();
		Иначе
			НайденноеЗначение = Неопределено;
		КонецЕсли;		

	ИначеЕсли ВРег(ИмяПараметра) = ВРег("КэшСтратегииАвтонумерации") Тогда	
		НайденноеЗначение = Новый Соответствие;		
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ФормаОповещенияОЗадачах") Тогда	
		НайденноеЗначение = Задачи.ЗадачиПользователя.ПолучитьФорму("ФормаОповещенияОЗадачах", ,"Оригинал");
		
	#КонецЕсли

	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глКоличествоСекундОпросаОбмена") Тогда
		НайденноеЗначение = Константы.ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте.Получить();
		Если НайденноеЗначение = 0 Тогда
			НайденноеЗначение = 60;
		КонецЕсли;
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ЗначенияНастроекПользователей") Тогда
		НайденноеЗначение = Новый Соответствие;
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ЗначенияДополнительныхПравПользователя") Тогда
		НайденноеЗначение = Новый Соответствие;
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("УчетПоВсемОрганизациям") Тогда
		НайденноеЗначение = Истина;
		
	//ИначеЕсли ВРег(ИмяПараметра) = ВРег("ОсновнаяОрганизация") Тогда	
	//	НайденноеЗначение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");	
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глОбработкаСообщений") Тогда
		НайденноеЗначение = Обработки.СообщенияВыполняемыхДействий.Создать();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ДатаНачалаУчетаНКУ") Тогда
		НайденноеЗначение = '20110401';
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ДатаНКУ2015") Тогда
		НайденноеЗначение = '2015 01 01';
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ДатаНачалаРаспределенияОПЗвНУ") Тогда
		// констната введена ТОЛЬКО для возможности влиять на значение параметра 
		// с использованием внешней обработки, которую может написать любой партнер 1С.
		// разработчики считают правильным использование даты  - 01.08.2011. 
		// если пользователь не согласен - необходимо изменить значение константы внешней обработкой
		НайденноеЗначение = Константы.ДатаНачалаРаспределенияОПЗвНУ.Получить();
		Если НЕ ЗначениеЗаполнено(НайденноеЗначение) Тогда
			НайденноеЗначение = '20110801';
		КонецЕсли;

	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ДатаВступленияВСилуПриказа1379") Тогда
		// констната введена ТОЛЬКО для возможности влиять на значение параметра 
		// с использованием внешней обработки, которую может написать любой партнер 1С.
		НайденноеЗначение = Константы.ДатаВступленияВСилуПриказа1379.Получить();
		Если НЕ ЗначениеЗаполнено(НайденноеЗначение) Тогда
			НайденноеЗначение = '20111216';
		КонецЕсли;

	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ДатаНачалаИспользованияФормыННПоЛекарствам") Тогда
		// константа используется для перехода на новую форму НН с 7% НДС и работы конфигурации
		// пока такой формы нет
		НайденноеЗначение = Константы.ДатаНачалаИспользованияФормыННПоЛекарствам.Получить();
		Если НЕ ЗначениеЗаполнено(НайденноеЗначение) Тогда
			НайденноеЗначение = '20141201';
		КонецЕсли;

	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ДатаНачалаПереоценкиВалютыПоПравиламПриказа627") Тогда
		// константа введена ТОЛЬКО для возможности влиять на значение параметра 
		// с использованием внешней обработки, которую может написать любой партнер 1С.
		НайденноеЗначение = Константы.ДатаНачалаПереоценкиВалютыПоПравиламПриказа627.Получить();
		Если НЕ ЗначениеЗаполнено(НайденноеЗначение) Тогда
			НайденноеЗначение = '20131001';
		КонецЕсли;
		
	Иначе
		СтрокаИсключения = "Невозможно обработать параметр " + """" + ИмяПараметра + """" + " для получения значения";
		ВызватьИсключение СтрокаИсключения;
	КонецЕсли;
	
	Кэш.Вставить(ИмяПараметра, НайденноеЗначение);
	КэшИзменен = Истина;
	
	Возврат НайденноеЗначение;
	
КонецФункции



Функция НайтиСправочникПоРеквизиту(Справочник, Реквизит, Значение) Экспорт 
	
	Результат = Новый Структура;
	Результат.Вставить("Существует", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВидСправочника.Ссылка КАК Ссылка
	|ИЗ
	|	&ВидСправочника КАК ВидСправочника
	|ГДЕ
	|	&Реквизит = &Значение";
	
	Запрос.УстановитьПараметр("ВидСправочника", "Справочник." + Справочник);
	Запрос.УстановитьПараметр("Реквизит", "ВидСправочника."+Реквизит);
	Запрос.УстановитьПараметр("Значение", Значение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить("Ссылка", Выборка.Ссылка);
		Результат.Вставить("Существует", Истина);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


Процедура ПередНачаломРаботыСистемыНаСервере() Экспорт 
	
	//СоставФорм = Новый СоставФормНачальнойСтраницы; 
	//СоставФорм.ЛеваяКолонка.Добавить("Справочник.Боты.Форма.ФормаЭлемента"); 
	//
	//ВременныеНастройки = Новый НастройкиНачальнойСтраницы; 
	//ВременныеНастройки.УстановитьСоставФорм(СоставФорм); 
	//
	////ИмяПользователя = ПараметрыСеанса.ТекущийПользователь;
	//
	//ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы", , ВременныеНастройки);	
КонецПроцедуры