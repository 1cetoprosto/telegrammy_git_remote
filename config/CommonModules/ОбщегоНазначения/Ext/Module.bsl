////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ТИПАМИ


// Служебная функция, предназначенная для получения описания типов строки, заданной длины.
// 
// Параметры:
//  ДлинаСтроки - число, длина строки.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для строки указанной длины.
//
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт
	
	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная));
	
КонецФункции // ПолучитьОписаниеТиповСтроки()	 

// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
// 
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти = 0, ЗнакЧисла = Неопределено) Экспорт

	Если ЗнакЧисла = Неопределено Тогда
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
	Иначе
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, ЗнакЧисла);
	КонецЕсли;

	Возврат Новый ОписаниеТипов("Число", КвалификаторЧисла);

КонецФункции // ПолучитьОписаниеТиповЧисла()

// Служебная функция, предназначенная для получения описания типов даты
// 
// Параметры:
//  ЧастиДаты - системное перечисление ЧастиДаты.
// 
Функция ПолучитьОписаниеТиповДаты(ЧастиДаты) Экспорт
	
	Возврат Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты));
	
КонецФункции	// ПолучитьОписаниеТиповДаты() 

// Служебная функция - возвращает принадлежность объекта метаданных определенному классу
// 
// Параметры:
//	Класс  - класс
//	Объект - объект метаданных
// 
Функция ПринадлежностьКлассуМетаданных(Класс, Объект) Экспорт
	Для Каждого МДОбъект Из Метаданные[Класс] Цикл
		Если МДОбъект = Объект Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции // ПринадлежностьКлассуМетаданных()

// Служебная функция, предназначенная для получения описания типов набора записей по объекту метаданных
// Параметры:
//	Объект - объект метаданных
//
// Возвращаемое значение:
// Описание типов с единственным типом набора записей
//
Функция ПолучитьОписаниеТиповНабораЗаписей(Объект) Экспорт
	
	Массив = Новый Массив;
	Если ПринадлежностьКлассуМетаданных("РегистрыРасчета", Объект) Тогда
		Массив.Добавить(Тип("РегистрРасчетаНаборЗаписей."+Объект.Имя));
	ИначеЕсли ПринадлежностьКлассуМетаданных("РегистрыБухгалтерии", Объект) Тогда
		Массив.Добавить(Тип("РегистрБухгалтерииНаборЗаписей."+Объект.Имя));
	ИначеЕсли ПринадлежностьКлассуМетаданных("РегистрыНакопления", Объект) Тогда
		Массив.Добавить(Тип("РегистрНакопленияНаборЗаписей."+Объект.Имя));
	ИначеЕсли ПринадлежностьКлассуМетаданных("РегистрыСведений", Объект) Тогда
		Массив.Добавить(Тип("РегистрСведенийНаборЗаписей."+Объект.Имя));
	КонецЕсли;
	Возврат Новый ОписаниеТипов(Массив);
	
КонецФункции  // ПолучитьОписаниеТиповНабораЗаписей()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПАРАМЕТРОВ СЕАНСА, ПЕРЕМЕННЫХ МОДУЛЯ ПРИЛОЖЕНИЯ

// Функция возвращает значение экспортных переменных модуля приложений из параметра сеанса
// Необходмо для возможности создания объектов на сервере
Функция ПолучитьЗначениеПеременной(ИмяПараметра, Кэш = Неопределено, КэшИзменен = Ложь) Экспорт
	
	Если Кэш = Неопределено Тогда
		// Кэш не был проинициализирован
		Кэш = Новый Структура;
	Иначе
		// Ищем значение в структуре
		НайденноеЗначение = Неопределено;
		Если Кэш.Свойство(ИмяПараметра, НайденноеЗначение) Тогда
			Возврат НайденноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	// Значение в КЭШе не нашли, получим значение из БД
	Если ВРег(ИмяПараметра) = ВРег("глТекущийПользователь") Тогда
		НайденноеЗначение = ПараметрыСеанса.ТекущийПользователь;
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глСоответствиеТекстовЭлектронныхПисем") Тогда
		НайденноеЗначение = Новый Соответствие;
			
	//ИначеЕсли ВРег(ИмяПараметра) = ВРег("УчетнаяПолитикаПоУправленческомуУчету") Тогда
	//	НайденноеЗначение = СоздатьКЭШУчетнойПолитики("");
	//		
	//ИначеЕсли ВРег(ИмяПараметра) = ВРег("УчетнаяПолитикаПоНалоговомуУчету") Тогда
	//	НайденноеЗначение = СоздатьКЭШУчетнойПолитики("НалоговыйУчет");
	//	
	//ИначеЕсли ВРег(ИмяПараметра) = ВРег("глУчетнаяПолитикаПоПерсоналуОрганизации") Тогда
	//	НайденноеЗначение = ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации();
	
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте") Тогда
		НайденноеЗначение = Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить();	
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ВалютаРегламентированногоУчета") Тогда
		НайденноеЗначение = Константы.ВалютаРегламентированногоУчета.Получить();
			
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ВалютаУправленческогоУчета") Тогда
		НайденноеЗначение = Константы.ВалютаУправленческогоУчета.Получить();
			
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ИспользоватьСерииНоменклатуры") Тогда
		НайденноеЗначение = Константы.ИспользоватьСерииНоменклатуры.Получить();
			
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ИспользоватьХарактеристикиНоменклатуры") Тогда
		НайденноеЗначение = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
			
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ИспользоватьВозвратнуюТару") Тогда
		НайденноеЗначение = Константы.ИспользоватьВозвратнуюТару.Получить();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("УказаниеСкладовВТабличнойЧастиДокументов") Тогда
		НайденноеЗначение = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ИспользоватьОплатуБанковскимиКредитами") Тогда
		НайденноеЗначение = Константы.ИспользоватьОплатуБанковскимиКредитами.Получить();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ИспользоватьОплатуПлатежнымиКартами") Тогда
		НайденноеЗначение = Константы.ИспользоватьОплатуПлатежнымиКартами.Получить();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ПечатьПрефиксаРИБ") Тогда
		НайденноеЗначение = Константы.ПечатьПрефиксаРИБ.Получить()
		
	//ИначеЕсли ВРег(ИмяПараметра) = ВРег("глОбработкаАвтоОбменДанными") Тогда
	//	НайденноеЗначение = ПроцедурыОбменаДанными.ВыполнитьИнициализациюАвтообменаПриНачалеРаботы();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ИспользоватьУправляемыеБлокировки") Тогда	
		НайденноеЗначение = Метаданные.РежимУправленияБлокировкойДанных <> Метаданные.СвойстваОбъектов.РежимУправленияБлокировкойДанныхПоУмолчанию.Автоматический
 			И Найти(СтрокаСоединенияИнформационнойБазы(), "Srvr=") = 1;
		
	#Если Клиент Тогда

	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глОбработкаАвтоПолученияОтправкиЭлектронныхПисем") Тогда	
		Если ПравоДоступа("Использование", Метаданные.Обработки.АвтоПолучениеОтправкаЭлектронныхПисем) Тогда
			НайденноеЗначение = Обработки.АвтоПолучениеОтправкаЭлектронныхПисем.ПолучитьФорму();
		Иначе
			НайденноеЗначение = Неопределено;
		КонецЕсли;		

	ИначеЕсли ВРег(ИмяПараметра) = ВРег("КэшСтратегииАвтонумерации") Тогда	
		НайденноеЗначение = Новый Соответствие;		
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ФормаОповещенияОЗадачах") Тогда	
		НайденноеЗначение = Задачи.ЗадачиПользователя.ПолучитьФорму("ФормаОповещенияОЗадачах", ,"Оригинал");
		
	#КонецЕсли

	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глКоличествоСекундОпросаОбмена") Тогда
		НайденноеЗначение = Константы.ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте.Получить();
		Если НайденноеЗначение = 0 Тогда
			НайденноеЗначение = 60;
		КонецЕсли;
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ЗначенияНастроекПользователей") Тогда
		НайденноеЗначение = Новый Соответствие;
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ЗначенияДополнительныхПравПользователя") Тогда
		НайденноеЗначение = Новый Соответствие;
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("УчетПоВсемОрганизациям") Тогда
		НайденноеЗначение = Истина;
		
	//ИначеЕсли ВРег(ИмяПараметра) = ВРег("ОсновнаяОрганизация") Тогда	
	//	НайденноеЗначение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");	
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("глОбработкаСообщений") Тогда
		НайденноеЗначение = Обработки.СообщенияВыполняемыхДействий.Создать();
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ДатаНачалаУчетаНКУ") Тогда
		НайденноеЗначение = '20110401';
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ДатаНКУ2015") Тогда
		НайденноеЗначение = '2015 01 01';
		
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ДатаНачалаРаспределенияОПЗвНУ") Тогда
		// констната введена ТОЛЬКО для возможности влиять на значение параметра 
		// с использованием внешней обработки, которую может написать любой партнер 1С.
		// разработчики считают правильным использование даты  - 01.08.2011. 
		// если пользователь не согласен - необходимо изменить значение константы внешней обработкой
		НайденноеЗначение = Константы.ДатаНачалаРаспределенияОПЗвНУ.Получить();
		Если НЕ ЗначениеЗаполнено(НайденноеЗначение) Тогда
			НайденноеЗначение = '20110801';
		КонецЕсли;

	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ДатаВступленияВСилуПриказа1379") Тогда
		// констната введена ТОЛЬКО для возможности влиять на значение параметра 
		// с использованием внешней обработки, которую может написать любой партнер 1С.
		НайденноеЗначение = Константы.ДатаВступленияВСилуПриказа1379.Получить();
		Если НЕ ЗначениеЗаполнено(НайденноеЗначение) Тогда
			НайденноеЗначение = '20111216';
		КонецЕсли;

	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ДатаНачалаИспользованияФормыННПоЛекарствам") Тогда
		// константа используется для перехода на новую форму НН с 7% НДС и работы конфигурации
		// пока такой формы нет
		НайденноеЗначение = Константы.ДатаНачалаИспользованияФормыННПоЛекарствам.Получить();
		Если НЕ ЗначениеЗаполнено(НайденноеЗначение) Тогда
			НайденноеЗначение = '20141201';
		КонецЕсли;

	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ДатаНачалаПереоценкиВалютыПоПравиламПриказа627") Тогда
		// константа введена ТОЛЬКО для возможности влиять на значение параметра 
		// с использованием внешней обработки, которую может написать любой партнер 1С.
		НайденноеЗначение = Константы.ДатаНачалаПереоценкиВалютыПоПравиламПриказа627.Получить();
		Если НЕ ЗначениеЗаполнено(НайденноеЗначение) Тогда
			НайденноеЗначение = '20131001';
		КонецЕсли;
		
	Иначе
		СтрокаИсключения = "Невозможно обработать параметр " + """" + ИмяПараметра + """" + " для получения значения";
		ВызватьИсключение СтрокаИсключения;
	КонецЕсли;
	
	Кэш.Вставить(ИмяПараметра, НайденноеЗначение);
	КэшИзменен = Истина;
	
	Возврат НайденноеЗначение;
	
КонецФункции

Функция НайтиСправочникПоРеквизиту(Справочник, Реквизит, Значение) Экспорт 
	
	Результат = Новый Структура;
	Результат.Вставить("Существует", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВидСправочника.Ссылка КАК Ссылка
	|ИЗ
	|	&ВидСправочника КАК ВидСправочника
	|ГДЕ
	|	&Реквизит = &Значение";
	
	Запрос.УстановитьПараметр("ВидСправочника", "Справочник." + Справочник);
	Запрос.УстановитьПараметр("Реквизит", "ВидСправочника."+Реквизит);
	Запрос.УстановитьПараметр("Значение", Значение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить("Ссылка", Выборка.Ссылка);
		Результат.Вставить("Существует", Истина);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


Процедура ПередНачаломРаботыСистемыНаСервере(Отказ) Экспорт 
	
	НомерСоединения  = НомерСоединенияИнформационнойБазы();
	ИмяПриложения	 = ПолучитьИмяПриложенияТекущегоСоединения(НомерСоединения);
	
	Если (ИмяПриложения = "WebClient") и (ПараметрыСеанса.ТекущийПользователь = "telegram")Тогда
		//Если ПараметрыСеанса.ТекущийПользователь = "telegram" Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Доступ запрещен!";
			Сообщение.Сообщить();
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Функция ПолучитьИмяПриложенияСеанса(НомерСоединения, Представление = Ложь)
//НомерСоединения (Число) номер соединения по которому необходимо получить контекст сеанса
//Представление (Булево) - если Истина то функция вернет представления контекста сеанса (удобочитаемое) 
//Пример ИмяПриложения: "WebServerExtension" Представление:"Модуль расширения веб-сервера"
//Возвращает (Строка) - имя приложения (Контекст сеанса) или представление имени приложения
//
Функция ПолучитьИмяПриложенияТекущегоСоединения(НомерСоединения, Представление = Ложь) Экспорт
	
	ИмяПриложения = "";  
	
	СеансыИБ         = ПолучитьСеансыИнформационнойБазы();        
	Для Каждого Сеанс Из СеансыИБ Цикл         
		Если Сеанс.НомерСоединения = НомерСоединения Тогда
			Если Представление Тогда
				ИмяПриложения = ПредставлениеПриложения(Сеанс.ИмяПриложения); 
			Иначе
				ИмяПриложения = Сеанс.ИмяПриложения;
			КонецЕсли; 
		КонецЕсли;   
	КонецЦикла;
	
	Возврат ИмяПриложения;
	
КонецФункции

// Возвращает менеджер объекта по полному имени объекта метаданных.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  ПолноеИмя - Строка - полное имя объекта метаданных. Пример: "Справочник.Организации".
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер, ОбработкаМенеджер, РегистрСведенийМенеджер - менеджер объекта.
// 
// Пример:
//  МенеджерСправочника = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.Организации");
//  ПустаяСсылка = МенеджерСправочника.ПустаяСсылка();
//
Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя) Экспорт
	Перем КлассОМ, ИмяОМ, Менеджер;
	
	ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
	
	Если ЧастиИмени.Количество() >= 2 Тогда
		КлассОМ = ЧастиИмени[0];
		ИмяОМ  = ЧастиИмени[1];
	КонецЕсли;
	
	Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
		
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Менеджер = Справочники;
		
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		Менеджер = Документы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Менеджер = Перечисления;
		
	ИначеЕсли ВРег(КлассОМ) = "ОТЧЕТ" Тогда
		Менеджер = Отчеты;
		
	ИначеЕсли ВРег(КлассОМ) = "ОБРАБОТКА" Тогда
		Менеджер = Обработки;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРРАСЧЕТА" Тогда
		Если ЧастиИмени.Количество() = 2 Тогда
			// Регистр расчета
			Менеджер = РегистрыРасчета;
		Иначе
			КлассПодчиненногоОМ = ЧастиИмени[2];
			ИмяПодчиненногоОМ = ЧастиИмени[3];
			Если ВРег(КлассПодчиненногоОМ) = "ПЕРЕРАСЧЕТ" Тогда
				// Перерасчет
				Попытка
					Менеджер = РегистрыРасчета[ИмяОМ].Перерасчеты;
					ИмяОм = ИмяПодчиненногоОМ;
				Исключение
					Менеджер = Неопределено;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
		Менеджер = БизнесПроцессы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
		Менеджер = Задачи;
		
	ИначеЕсли ВРег(КлассОМ) = "КОНСТАНТА" Тогда
		Менеджер = Константы;
		
	ИначеЕсли ВРег(КлассОМ) = "ПОСЛЕДОВАТЕЛЬНОСТЬ" Тогда
		Менеджер = Последовательности;
	КонецЕсли;
	
	Если Менеджер <> Неопределено Тогда
		Попытка
			Возврат Менеджер[ИмяОМ];
		Исключение
			Менеджер = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неизвестный тип объекта метаданных ""%1""';uk='Невідомий тип об`єкта метаданих ""%1""'"), ПолноеИмя);
	
КонецФункции

// Возвращает описание предмета в виде текстовой строки.
// 
// Параметры:
//  СсылкаНаПредмет - ЛюбаяСсылка - объект ссылочного типа.
//
// Возвращаемое значение:
//   Строка - представление предмета.
// 
Функция ПредметСтрокой(СсылкаНаПредмет) Экспорт
	
	Результат = "";
	
	Если СсылкаНаПредмет = Неопределено Или СсылкаНаПредмет.Пустая() Тогда
		Результат = НСтр("ru='не задан';uk='не заданий'");
	ИначеЕсли Метаданные.Документы.Содержит(СсылкаНаПредмет.Метаданные()) Тогда
		Результат = Строка(СсылкаНаПредмет);
	Иначе
		ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().ПредставлениеОбъекта;
		Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
			ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().Представление();
		КонецЕсли;
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)", Строка(СсылкаНаПредмет), ПредставлениеОбъекта);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции