
Процедура УдалениеНеЗаконченныхЗаписей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаписьНаПрием.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаписьНаПрием КАК ЗаписьНаПрием
		|ГДЕ
		|	ЗаписьНаПрием.Проведен = ЛОЖЬ
		|	И ЗаписьНаПрием.Дата < &ДатаВремя";
	
	Запрос.УстановитьПараметр("ДатаВремя", ТекущаяДата() - Константы.ВремяУдаленияЗаписей.Получить()*60);
	                                                    
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура НапоминаниеОЗаписи(Интервал) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаписиНаПрием.Мастер.Бот.Ссылка КАК МастерБотСсылка,
		|	ЗаписиНаПрием.Мастер.Бот.Обработка КАК МастерБотОбработка,
		|	ЗаписиНаПрием.Контрагент.Идентификатор КАК КонтрагентИдентификатор,
		|	ЗаписиНаПрием.ДатаВремяЗаписи КАК ДатаВремяЗаписи,
		|	ЗаписиНаПрием.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ЗаписиНаПрием КАК ЗаписиНаПрием
		|ГДЕ
		|	ЗаписиНаПрием.ТипЗаписиНаПрием = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейНаПрием.Телеграм)
		|	И &УсловиеВремени
		|ИТОГИ ПО
		|	МастерБотСсылка,
		|	КонтрагентИдентификатор,
		|	ДатаВремяЗаписи";
	
	Запрос.УстановитьПараметр("ДатаВремя", ТекущаяДата());
	
	УсловиеВремени = ?(Интервал="Час", "ДОБАВИТЬКДАТЕ(ЗаписиНаПрием.ДатаВремяЗаписи, МИНУТА, -ЗаписиНаПрием.Мастер.ВремяНапоминанияОЗаписиЧасовое) < &ДатаВремя",
	"ДОБАВИТЬКДАТЕ(ЗаписиНаПрием.ДатаВремяЗаписи, МИНУТА, -ЗаписиНаПрием.Мастер.ВремяНапоминанияОЗаписиСуточное) < &ДатаВремя");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеВремени", УсловиеВремени);  
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаМастерБотСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//мОповещенныеЗаказы = Новый Массив;
	
	Пока ВыборкаМастерБотСсылка.Следующий() Цикл
		// Создать обработку Бота
		АПИТелеграм = Обработки.Телеграм.Создать();
		АПИТелеграм.Бот = ВыборкаМастерБотСсылка.МастерБотСсылка;
		
		ДвижокБота = Обработки[ВыборкаМастерБотСсылка.МастерБотОбработка].Создать();
		ДвижокБота.Телеграм = АПИТелеграм;
		
		ВыборкаКонтрагентИдентификатор = ВыборкаМастерБотСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаКонтрагентИдентификатор.Следующий() Цикл
			ИДКонтрагента = ВыборкаКонтрагентИдентификатор.КонтрагентИдентификатор;
			
			ВыборкаДатаВремяЗаписи = ВыборкаКонтрагентИдентификатор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ТекстСообщения = "";
			
			Пока ВыборкаДатаВремяЗаписи.Следующий() Цикл
				
				ВремяЗаписи = ВыборкаДатаВремяЗаписи.ДатаВремяЗаписи;
				ТекстСообщения = "Нагадую про запис на " + ВремяЗаписи +":"+  Символы.ПС;
				
				ВыборкаДетальныеЗаписи = ВыборкаДатаВремяЗаписи.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
					ТекстСообщения = ТекстСообщения + Номенклатура + Символы.ПС;
				КонецЦикла;
				
			КонецЦикла;
			
			Результат = ДвижокБота.ОповеститьКонтрагента(ИДКонтрагента, ТекстСообщения);
			
			Если Результат["ok"] Тогда
				// зафиксировать это в рег. сведений.
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НапоминаниеОЗаписиЧасовое() Экспорт
	НапоминаниеОЗаписи("Час");
КонецПроцедуры

Процедура НапоминаниеОЗаписиСуточное() Экспорт
	НапоминаниеОЗаписи("Сутки");
КонецПроцедуры

Процедура УдалениеНеЗаконченныхСессийКонтрагентов() Экспорт
	
	Продолжать = Истина;
	
	Пока Продолжать Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СессииКонтрагентов.Бот КАК Бот
		|ИЗ
		|	РегистрСведений.СессииКонтрагентов КАК СессииКонтрагентов
		|ГДЕ
		|	СессииКонтрагентов.ДатаСоздания < &ДатаВремя";
		
		Запрос.УстановитьПараметр("ДатаВремя", ТекущаяДата() - 60*60*24);
		
		Продолжать = Не Запрос.Выполнить().Пустой();
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.СессииКонтрагентов.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Бот.Установить(Выборка.Бот);
			
			НаборЗаписей.Записать(Истина);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассылкаНапоминанийКонтрагентам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НапоминанияКонтрагента.Источник.Ссылка КАК Бот,
	|	НапоминанияКонтрагента.Контрагент.Идентификатор КАК КонтрагентИдентификатор,
	|	НапоминанияКонтрагента.Описание КАК Описание,
	|	НапоминанияКонтрагента.Источник.Обработка КАК ИсточникОбработка,
	|	НапоминанияКонтрагента.Контрагент КАК Контрагент,
	|	НапоминанияКонтрагента.ВремяСобытия КАК ВремяСобытия,
	|	НапоминанияКонтрагента.Источник КАК Источник,
	|	НапоминанияКонтрагента.СрокНапоминания КАК СрокНапоминания,
	|	НапоминанияКонтрагента.ПредставлениеИсточника КАК ПредставлениеИсточника
	|ИЗ
	|	РегистрСведений.НапоминанияКонтрагента КАК НапоминанияКонтрагента
	|ГДЕ
	|	НапоминанияКонтрагента.Доставлено = ЛОЖЬ
	|	И НапоминанияКонтрагента.СрокНапоминания <= &ДатаВремя
	|ИТОГИ ПО
	|	Бот,
	|	КонтрагентИдентификатор";
	
	Запрос.УстановитьПараметр("ДатаВремя", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИсточникСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИсточникСсылка.Следующий() Цикл
		// Создать обработку Бота
		АПИТелеграм = Обработки.Телеграм.Создать();
		АПИТелеграм.Бот = ВыборкаИсточникСсылка.Бот;
		
		ДвижокБота = Обработки[ВыборкаИсточникСсылка.ИсточникОбработка].Создать();
		ДвижокБота.Телеграм = АПИТелеграм;
		
		ВыборкаКонтрагентИдентификатор = ВыборкаИсточникСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаКонтрагентИдентификатор.Следующий() Цикл
			
			ВыборкаДетальныеЗаписи = ВыборкаКонтрагентИдентификатор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ИДКонтрагента = ВыборкаДетальныеЗаписи.КонтрагентИдентификатор;
				ТекстСообщения = ВыборкаДетальныеЗаписи.Описание;
				
				//Результат = ДвижокБота.ОповеститьКонтрагента(ИДКонтрагента, ТекстСообщения);
				//
				// Если Результат["ok"] Тогда
				МенеджерЗаписи = РегистрыСведений.НапоминанияКонтрагента.СоздатьМенеджерЗаписи();
				
				МенеджерЗаписи.СрокНапоминания = ВыборкаДетальныеЗаписи.СрокНапоминания;
				МенеджерЗаписи.Контрагент = ВыборкаДетальныеЗаписи.Контрагент;
				МенеджерЗаписи.Источник = ВыборкаДетальныеЗаписи.Источник;
				МенеджерЗаписи.ВремяСобытия = ВыборкаДетальныеЗаписи.ВремяСобытия;
				МенеджерЗаписи.Доставлено = Истина;
				МенеджерЗаписи.Описание = ВыборкаДетальныеЗаписи.Описание;
				
				//Запись.Прочитать(); 
				//
				//Если Запись.Выбран() Тогда 
				Попытка
					МенеджерЗаписи.Записать(); 	
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
				
				//КонецЕсли;
				
				//КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассылкаНапоминанийКонтрагентам2() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НапоминанияКонтрагента.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.НапоминанияКонтрагента КАК НапоминанияКонтрагента
	|ГДЕ
	|	НапоминанияКонтрагента.Доставлено = ЛОЖЬ
	|	И НапоминанияКонтрагента.СрокНапоминания <= &ДатаВремя";
	
	Запрос.УстановитьПараметр("ДатаВремя", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.НапоминанияКонтрагента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для каждого Запись Из НаборЗаписей Цикл
			
			Если Запись.СрокНапоминания < ТекущаяДата() Тогда
				
				// Создать обработку Бота
				АПИТелеграм = Обработки.Телеграм.Создать();
				АПИТелеграм.Бот = Запись.Источник;
				
				ДвижокБота = Обработки[Запись.Источник.Обработка].Создать();
				ДвижокБота.Телеграм = АПИТелеграм;
				
				ИДКонтрагента = Запись.Контрагент.Идентификатор;
				ТекстСообщения = Запись.Описание;
				
				Результат = ДвижокБота.ОповеститьКонтрагента(ИДКонтрагента, ТекстСообщения);
				
				Если Результат["ok"] Тогда
					
					Запись.Доставлено = Истина;
					
					Попытка
						НаборЗаписей.Записать(); 	
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры
